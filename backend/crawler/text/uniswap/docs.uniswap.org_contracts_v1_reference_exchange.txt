








Exchange | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 ProtocolOverviewGuidesSet Up Your Local EnvironmentImplement A SwapProviding LiquidityLiquidity MiningImplement Flash SwapsGovernance ProposalsTechnical ReferenceUniversal RouterPermit2V2 ProtocolV1 ProtocolOverviewGuidesConnect to UniswapPool LiquidityTrade TokensCustom LinkingIframe IntegrationToken ListingTechnical ReferenceFactoryExchangeInterfacesüè†V1 ProtocolTechnical ReferenceExchangeHelpful?On this pagesetupParameterDescriptiontoken_addrEthereum address of an ERC20 TokenSmart Contract‚Äã# Can only be called by factory contract during createExchange()setup(token_addr: address):CopyWeb3‚Äã// Can only be called by factory contract during createExchange()exchangeContract.methods.setup((token: String)).send()CopyaddLiquidityParameterTypeDescriptionmsg.valueuint256Amount of ETH addedmin_liquidityuint256Minimum minted liquiditymax_tokensuint256Maximum ERC20 tokens addeddeadlineuint256Transaction deadlineReturnsuint256Amount of liquidity tokens mintedSmart Contract‚Äã@payableaddLiquidity(    min_liquidity: uint256,    max_tokens: uint256,    deadline: uint256): uint256CopyWeb3‚ÄãexchangeContract.methods.addLiquidity(min_liquidity, max_tokens, deadline).send({ value: ethValue })CopyremoveLiquidityParameterTypeDescriptionamountuint256Amount of liquidity burnedmin_ethuint256Minimum ETH removedmin_tokensuint256Minimum ERC20 tokens removeddeadlineuint256Transaction deadlineReturnsuint256Amount of ETH removeduint256Amount of ERC20 tokens removed.Smart Contract‚ÄãremoveLiquidity(    amount: uint256;    min_eth: uint256,    min_tokens: uint256,    deadline: uint256): (uint256, uint256)CopyWeb3‚ÄãexchangeContract.methods.removeLiquidity(amount, min_eth, min_tokens, deadline).send()CopydefaultParameterTypeDescriptionmsg.valueuint256Amount of ETH soldSmart Contract‚Äã# Default function in Vyper replaces the "fallback" function in Solidity@payable__default__():CopyWeb3‚Äãweb3.eth.sendTransaction({ value: ethAmount })CopyethToTokenSwapInputParameterTypeDescriptionmsg.valueuint256Amount of ETH soldmin_tokensuint256Minimum ERC20 tokens boughtdeadlineuint256Transaction deadlineReturnsuint256Amount of ERC20 tokens boughtSmart Contract‚Äã@payableethToTokenSwapInput(    min_tokens: uint256,    deadline: uint256): uint256CopyWeb3‚ÄãexchangeContract.methods.ethToTokenSwapInput(min_liquidity, max_tokens, deadline).send({ value: ethValue })CopyethToTokenTransferInputParameterTypeDescriptionmsg.valueuint256Amount of ETH soldmin_tokensuint256Minimum ERC20 tokens boughtdeadlineuint256Transaction deadlinerecipientaddressAddress that receives ERC20 tokensReturnsuint256Amount of ERC20 tokens boughtSmart Contract‚Äã@payableethToTokenTransferInput(    min_tokens: uint256,    deadline: uint256,    recipient: address): uint256CopyWeb3‚ÄãexchangeContract.methods  .ethToTokenTransferInput(min_liquidity, max_tokens, deadline, recipient)  .send({ value: ethValue })CopyethToTokenSwapOutputParameterTypeDescriptionmsg.valueuint256Maximum ETH soldtokens_boughtuint256Amount of ERC20 tokens boughtdeadlineuint256Transaction deadlineReturnsuint256Amount of ETH soldSmart Contract‚Äã@payableethToTokenSwapOutput(    tokens_bought: uint256,    deadline: uint256): uint256CopyWeb3‚ÄãexchangeContract.methods.ethToTokenSwapOutput(tokens_bought, deadline).send({ value: ethValue })CopyethToTokenTransferOutputParameterTypeDescriptionmsg.valueuint256Maximum ETH soldtokens_boughtuint256Amount of ERC20 tokens boughtdeadlineuint256Transaction deadlinerecipientaddressAddress that receives ERC20 tokensReturnsuint256Amount of ETH soldSmart Contract‚Äã@payableethToTokenTransferOutput(    tokens_bought: uint256,    deadline: uint256,    recipient: address): uint256CopyWeb3‚ÄãexchangeContract.methods  .ethToTokenTransferOutput(tokens_bought, deadline, (recipient: String))  .send({ value: ethValue })CopytokenToEthSwapInputParameterTypeDescriptiontokens_solduint256Amount of ERC20 tokens soldmin_ethuint256Minimum ETH boughtdeadlineuint256Transaction deadlineReturnsuint256Amount of ETH boughtSmart Contract‚ÄãtokenToEthSwapInput(    tokens_sold: uint256,    min_eth: uint256,    deadline: uint256): uint256CopyWeb3‚ÄãexchangeContract.methods.tokenToEthSwapInput(tokens_sold, min_eth, deadline).send()CopytokenToEthTransferInputParameterTypeDescriptiontokens_solduint256Amount of ERC20 tokens soldmin_ethuint256Minimum ETH boughtdeadlineuint256Transaction deadlinerecipientaddressAddress that receives ETHReturnsuint256Amount of ETH boughtSmart Contract‚ÄãtokenToEthTransferInput(    tokens_sold: uint256,    min_eth: uint256,    deadline: uint256,    recipient: address): uint256CopyWeb3‚ÄãexchangeContract.methods.tokenToEthTransferInput(tokens_sold, min_eth, deadline, recipient).send()CopytokenToEthSwapOutputParameterTypeDescriptioneth_boughtuint256Amount of ETH boughtmax_tokensuint256Maximum ERC20 tokens solddeadlineuint256Transaction deadlineReturnsuint256Amount of ERC20 tokens soldSmart Contract‚ÄãtokenToEthSwapOutput(    eth_bought: uint256,    max_tokens: uint256,    deadline: uint256): uint256CopyWeb3‚ÄãexchangeContract.methods.tokenToEthSwapOutput(eth_bought, max_tokens, (deadline: Integer)).send()CopytokenToEthTransferOutputParameterTypeDescriptioneth_boughtuint256Amount of ETH boughtmax_tokensuint256Maximum ERC20 tokens solddeadlineuint256Transaction deadlinerecipientaddressAddress that receives ETHReturnsuint256Amount of ERC20 tokens soldSmart Contract‚ÄãtokenToEthTransferOutput(    eth_bought: uint256,    max_tokens: uint256,    deadline: uint256,    recipient: address): uint256CopyWeb3‚ÄãexchangeContract.methods  .tokenToEthTransferOutput(eth_bought, max_tokens, (deadline: Integer), (recipient: String))  .send()CopytokenToTokenSwapInputParameterTypeDescriptiontokens_solduint256Amount of input ERC20 tokens soldmin_tokens_boughtuint256Minimum output ERC20 tokens boughtmin_eth_boughtuint256Minimum ETH bought as intermediarydeadlineuint256Transaction deadlinetoken_addraddressAddress of output ERC20 tokenReturnsuint256Amount of output ERC20 tokens boughtSmart Contract‚ÄãtokenToTokenSwapInput(    tokens_sold: uint256,    min_tokens_bought: uint256,    min_eth_bought: uint256,    deadline: uint256,    token_addr: address): uint256CopyWeb3‚ÄãexchangeContract.methods  .tokenToTokenSwapInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, token_addr)  .send()CopytokenToTokenTransferInputParameterTypeDescriptiontokens_solduint256Amount of input ERC20 tokens soldmin_tokens_boughtuint256Minimum output ERC20 tokens boughtmin_eth_boughtuint256Minimum ETH bought as intermediarydeadlineuint256Transaction deadlinerecipientaddressAddress that receives output ERC20 tokenstoken_addraddressAddress of output ERC20 tokenReturnsuint256Amount of output ERC20 tokens boughtSmart Contract‚ÄãtokenToTokenTransferInput(    tokens_sold: uint256,    min_tokens_bought: uint256,    min_eth_bought: uint256,    deadline: uint256,    recipient: address    token_addr: address): uint256CopyWeb3‚ÄãexchangeContract.methods  .tokenToTokenTransferInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, recipient, token_addr)  .send()CopytokenToTokenSwapOutputParameterTypeDescriptiontokens_boughtuint256Amount of output ERC20 tokens boughtmax_tokens_solduint256Maximum input ERC20 tokens boughtmax_eth_solduint256Maximum ETH bought as intermediarydeadlineuint256Transaction deadlinetoken_addraddressAddress of output ERC20 tokenReturnsuint256Amount of input ERC20 tokens soldSmart Contract‚ÄãtokenToTokenSwapOutput(    tokens_bought: uint256,    max_tokens_sold: uint256,    max_eth_sold: uint256,    deadline: uint256,    token_addr: address): uint256CopyWeb3‚ÄãexchangeContract.methods  .tokenToTokenSwapOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, token_addr)  .send()CopytokenToTokenTransferOutputParameterTypeDescriptiontokens_boughtuint256Amount of output ERC20 tokens boughtmax_tokens_solduint256Maximum input ERC20 tokens boughtmax_eth_solduint256Maximum ETH bought as intermediarydeadlineuint256Transaction deadlinerecipientaddressAddress that receives output ERC20 tokenstoken_addraddressAddress of output ERC20 tokenReturnsuint256Amount of input ERC20 tokens soldSmart Contract‚ÄãtokenToTokenTransferOutput(    tokens_bought: uint256,    max_tokens_sold: uint256,    max_eth_sold: uint256,    deadline: uint256,    recipient: address,    token_addr: address): uint256CopyWeb3‚ÄãexchangeContract.methods  .tokenToTokenTransferOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, recipient, token_addr)  .send()CopytokenToExchangeSwapInputParameterTypeDescriptiontokens_solduint256Amount of input ERC20 tokens soldmin_tokens_boughtuint256Minimum output ERC20 tokens boughtmin_eth_boughtuint256Minimum ETH bought as intermediarydeadlineuint256Transaction deadlineexchange_addraddressAddress of output ERC20 token exchangeReturnsuint256Amount of output ERC20 tokens boughtSmart Contract‚ÄãtokenToTokenSwapInput(    tokens_sold: uint256,    min_tokens_bought: uint256,    min_eth_bought: uint256,    deadline: uint256,    exchange_addr: address): uint256CopyWeb3‚ÄãexchangeContract.methods  .tokenToTokenSwapInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, exchange_addr)  .send()CopytokenToExchangeTransferInputParameterTypeDescriptiontokens_solduint256Amount of input ERC20 tokens soldmin_tokens_boughtuint256Minimum output ERC20 tokens boughtmin_eth_boughtuint256Minimum ETH bought as intermediarydeadlineuint256Transaction deadlinerecipientaddressAddress that receives output ERC20 tokensexchange_addraddressAddress of output ERC20 token exchangeReturnsuint256Amount of output ERC20 tokens boughtSmart Contract‚ÄãtokenToExchangeTransferInput(    tokens_sold: uint256,    min_tokens_bought: uint256,    min_eth_bought: uint256,    deadline: uint256,    recipient: address    exchange_addr: address): uint256CopyWeb3‚ÄãexchangeContract.methods  .tokenToExchangeTransferInput(tokens_sold, min_tokens_bought, min_eth_bought, deadline, recipient, exchange_addr)  .send()CopytokenToExchangeSwapOutputParameterTypeDescriptiontokens_boughtuint256Amount of output ERC20 tokens boughtmax_tokens_solduint256Maximum input ERC20 tokens boughtmax_eth_solduint256Maximum ETH bought as intermediarydeadlineuint256Transaction deadlineexchange_addraddressAddress of output ERC20 token exchangeReturnsuint256Amount of input ERC20 tokens soldSmart Contract‚ÄãtokenToExchangeSwapOutput(    tokens_bought: uint256,    max_tokens_sold: uint256,    max_eth_sold: uint256,    deadline: uint256,    exchange_addr: address): uint256CopyWeb3‚ÄãexchangeContract.methods  .tokenToExchangeSwapOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, exchange_addr)  .send()CopytokenToExchangeTransferOutputParameterTypeDescriptiontokens_boughtuint256Amount of output ERC20 tokens boughtmax_tokens_solduint256Maximum input ERC20 tokens boughtmax_eth_solduint256Maximum ETH bought as intermediarydeadlineuint256Transaction deadlinerecipientaddressAddress that receives output ERC20 tokensexchange_addraddressAddress of output ERC20 token exchangeReturnsuint256Amount of input ERC20 tokens soldSmart Contract‚ÄãtokenToExchangeTransferOutput(    tokens_bought: uint256,    max_tokens_sold: uint256,    max_eth_sold: uint256,    deadline: uint256,    recipient: address,    exchange_addr: address): uint256CopyWeb3‚ÄãexchangeContract.methods  .tokenToExchangeTransferOutput(tokens_bought, max_tokens_sold, max_eth_sold, deadline, recipient, exchange_addr)  .send()CopygetEthToTokenInputPriceParameterTypeDescriptioneth_solduint256Amount of ETH soldReturnsuint256Amount of ERC20 tokens that can be boughtSmart Contract‚Äã@constantgetEthToTokenInputPrice(eth_sold: uint256): uint256CopyWeb3‚ÄãexchangeContract.methods.getEthToTokenInputPrice(eth_sold).call()CopygetEthToTokenOutputPriceParameterTypeDescriptiontokens_boughtuint256Amount of ERC20 tokens boughtReturnsuint256Amount of ETH that must be soldSmart Contract‚Äã@constantgetEthToTokenOutputPrice(tokens_bought: uint256): uint256CopyWeb3‚ÄãexchangeContract.methods.getEthToTokenOutputPrice(tokens_bought).call()CopygetTokenToEthInputPriceParameterTypeDescriptiontokens_solduint256Amount of ERC20 tokens soldReturnsuint256Amount of ETH that can be boughtSmart Contract‚Äã@constantgetTokenToEthInputPrice(tokens_sold: uint256): uint256CopyWeb3‚ÄãexchangeContract.methods.getTokenToEthInputPrice(tokens_sold).call()CopygetTokenToEthOutputPriceParameterTypeDescriptioneth_boughtuint256Amount of ETH boughtReturnsuint256Amount of ERC20 tokens that must be soldSmart Contract‚Äã@constantgetTokenToEthOutputPrice(eth_bought: uint256): uint256CopyWeb3‚ÄãexchangeContract.methods.getTokenToEthOutputPrice(eth_bought).call()CopytokenAddressReturnsaddressAddress of ERC20 token sold on exchangeSmart Contract‚Äã@constanttokenAddress(): addressCopyWeb3‚ÄãexchangeContract.methods.tokenAddress().call()CopyfactoryAddressReturnsaddressAddress of factory that created exchangeSmart Contract‚Äã@constantfactoryAddress(): addressCopyWeb3‚ÄãexchangeContract.methods.factoryAddress().call()CopynameReturnsbytes32Name of liquidity tokenSmart Contract‚Äã# all exchange contracts have the same name@constantname(): bytes32 // Uniswap V1CopyWeb3‚ÄãexchangeContract.methods.tokenAddress().call()CopysymbolReturnsbytes32Symbol of liquidity tokenSmart Contract‚Äã# all exchange contracts have the same symbol@constantsymbol(): bytes32 // UNI-V1CopyWeb3‚ÄãexchangeContract.methods.tokenAddress().call()CopydecimalsReturnsuint256Decimals of liquidity tokenSmart Contract‚Äã# all exchange contracts have the same decimals@constantdecimals(): uint256 // 18CopyWeb3‚ÄãexchangeContract.methods.decimals().call()CopybalanceOfParameterTypeDescription_owneraddressEthereum addressReturnsuint256Liquidity token balance of addressSmart Contract‚Äã@constantbalanceOf(_owner: address): uint256CopyWeb3‚ÄãexchangeContract.methods.balanceOf(_owner).call()CopytransferParameterTypeDescription_toaddressRecipient address_valueuint256Amount transferredReturnsboolTrue if successful. Reverts or false on failureSmart Contract‚Äãtransfer(    _to: address,    _value : uint256): boolCopyWeb3‚ÄãexchangeContract.methods.transfer(_to, _value).send()CopytransferFromParameterTypeDescription_fromaddressSender address_toaddressRecipient address_valueuint256Amount transferredReturnsboolTrue if successful. Reverts or false on failureSmart Contract‚ÄãtransferFrom(    _from: address,    _to: address,    _value : uint256): boolCopyWeb3‚ÄãexchangeContract.methods.transferFrom(_from, _to, _value).send()CopyapproveParameterTypeDescription_spenderaddressAddress of approved spender_valueuint256Spender allowanceReturnsboolTrue if successful. Reverts or false on failureSmart Contract‚Äãapprove(    _spender: address,    _value: uint256): boolCopyWeb3‚ÄãexchangeContract.methods.approve(_spender, _value).send()CopyallowanceParameterTypeDescription_owneraddressAddress of liquidity token owner_spenderuint256Address of approved spenderReturnsuint256Spender allowanceSmart Contract‚Äãallowance(    _owner: address,    _spender: address): uint256CopyWeb3‚ÄãexchangeContract.methods.allowance(_owner, _spender).call()CopyEdit this pageHelpful?PreviousFactoryNextInterfacesSmart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3Smart ContractWeb3DevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



