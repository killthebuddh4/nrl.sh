








Fetcher | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 SDKOverviewGuidesBackgroundGetting a QuoteExecuting a TradeRouting a SwapPooling LiquidityTechnical ReferenceSwap Widgetweb3-reactCore SDKV2 SDKOverviewGuidesSDK Quick startFetching DataPricingTradingPair AddressesTechnical ReferenceGetting StartedTokenPairRouteTradeFractionsFetcherOther ExportsV1 SDKüè†V2 SDKTechnical ReferenceFetcherHelpful?On this pageFetcherThe data fetching logic is split from the rest of the code for better tree-shaking,
i.e. so that it does not get packaged into your code unless it is used.
The SDK is otherwise unconcerned with how you get data from the blockchain.This class contains static methods for constructing instances of pairs and tokens
from on-chain data. It cannot be constructed.Static MethodsfetchTokenData‚Äãasync fetchTokenData(  chainId: ChainId,  address: string,  provider = getDefaultProvider(getNetwork(chainId)),  symbol?: string,  name?: string): Promise<Token>CopyInitializes a class instance from a chainId and token address, if the decimals of the token are unknown and cannot be fetched externally. Decimals are fetched via an ethers.js v5 provider. If not passed in, a default provider is used.fetchPairData‚Äãasync fetchPairData(  tokenA: Token,  tokenB: Token,  provider = getDefaultProvider(getNetwork(tokenA.chainId))): Promise<Pair>CopyInitializes a class instance from two Tokens, if the pair's balances of these tokens are unknown and cannot be fetched externally. Pair reserves are fetched via an ethers.js v5 provider. If not passed in, a default provider is used.Helpful?PreviousFractionsNextOther ExportsfetchTokenDatafetchPairDataDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



