








Governance Reference | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 ProtocolOverviewGuidesSet Up Your Local EnvironmentImplement A SwapProviding LiquidityLiquidity MiningImplement Flash SwapsGovernance ProposalsTechnical ReferenceUniversal RouterPermit2V2 ProtocolOverviewConceptsProtocol OverviewCore ConceptsAdvanced TopicsGuidesInterface IntegrationSmart Contract IntegrationTechnical ReferenceAPIGovernanceGovernance ReferenceSmart ContractsV1 Protocolüè†V2 ProtocolTechnical ReferenceGovernanceGovernance ReferenceHelpful?On this pageGovernance ReferenceThe updated reference for the newly deployed Governor Bravo is available via Etherscan, some of the reference material below may be out of date.The Uniswap protocol is governed and upgraded by UNI token holders, using three distinct components; the UNI token, governance module, and Timelock. Together, these contracts allow the community to propose, vote, and implement changes to the uniswap protocol.Any addresses with more than 2.5M UNI delegated to it may propose governance actions, which contain finished, executable code. When a proposal is created, the community can cast their votes during a 3 day voting period. If a majority, and at least 4M votes are cast for the proposal, it is queued in the Timelock, and may be executed in a minimum of 2 days.Timelock‚ÄãThe Timelock contract can modify system parameters, logic, and contracts in a 'time-delayed, opt-out' upgrade pattern. Timelock has a hard-coded minimum delay of 2 days, which is the least amount of notice possible for a governance action. Each proposed action will be published at a minimum of 2 days in the future from the time of announcement. Major upgrades, such as changing the risk system, may have up to a 30 day delay. Timelock is controlled by the governance module; pending and completed governance actions can be monitored on the Timelock Dashboard.Key EventsDelegateChanged‚ÄãDelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)CopyEmitted when an account changes its delegate.DelegateVotesChanged‚ÄãDelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance)CopyEmitted when a delegate account's vote balance changes.ProposalCreated‚ÄãProposalCreated(uint id, address proposer, address[] targets, uint[] values, string[] signatures, bytes[] calldatas, uint startBlock, uint endBlock, string description)CopyEmitted when a new proposal is created.VoteCast‚ÄãVoteCast(address voter, uint proposalId, bool support, uint votes)CopyEmitted when a vote has been cast on a proposal.ProposalCanceled‚ÄãProposalCanceled(uint id)CopyEmitted when a proposal has been canceled.ProposalQueued‚ÄãProposalQueued(uint id, uint eta)CopyEmitted when a proposal has been queued in the Timelock.ProposalExecuted‚ÄãProposalExecuted(uint id)CopyEmitted when a proposal has been executed in the Timelock.Read-Only Functions: UNIGet Current Votes‚Äãfunction getCurrentVotes(address account) returns (uint96)CopyReturns the balance of votes for an account as of the current block.NameTypeaccountaddressAddress of the account of which to retrieve the number of votes.Get Prior Votes‚Äãfunction getPriorVotes(address account, uint blockNumber) returns (uint96)CopyReturns the prior number of votes for an account at a specific block number. The block number passed must be a finalized block or the function will revert.NameTypeaccountaddressAddress of the account of which to retrieve the prior number of votes.blocknumberuintThe block number at which to retrieve the prior number of votes.unnameduint96The number of prior votesState-Changing Functions: UNIDelegate‚Äãfunction delegate(address delegatee)CopyDelegate votes from the sender to the delegatee. Users can delegate to 1 address at a time, and the number of votes added to the delegatee‚Äôs vote count is equivalent to the balance of UNI in the user‚Äôs account. Votes are delegated from the current block and onward, until the sender delegates again, or transfers their UNI.NameTypedelegateeaddressThe address to which msg.sender wishes to delegate their votes to.Delegate By Signature‚Äãfunction delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s)CopyDelegate votes from the sender to the delegatee. Users can delegate to 1 address at a time, and the number of votes added to the delegatee‚Äôs vote count is equivalent to the balance of UNI in the user‚Äôs account. Votes are delegated from the current block and onward, until the sender delegates again, or transfers their UNI.NameTypedelegateeaddressThe address to which msg.sender wishis to delegate their vote tononceuintThe contract state required to match the signature. This can be retrieved from the contract‚Äôs public nonces mappingexpiryuintThe time when the signature expires. A block timestamp in seconds since the unix epoch.vuintThe recovery byte of the signature.rbytes32Half of the ECDSA signature pair.sbytes32Half of the ECDSA signature pair.Read-Only Functions: Governor AlphaQuorum Votes‚Äãfunction quorumVotes() public pure returns (uint)CopyReturns the minimum number of votes required for a proposal to succeed.Proposal Threshold‚Äãfunction proposalThreshold() returns (uint)CopyReturns the minimum number of votes required for an account to create a proposal.Proposal Max Operations‚Äãfunction proposalMaxOperations() returns (uint)CopyReturns the maximum number of actions that can be included in a proposal. Actions are functions calls that will be made when a proposal succeeds and executes.Voting Delay‚Äãfunction votingDelay() returns (uint)CopyReturns the number of blocks to wait before voting on a proposal may begin. This value is added to the current block number when a proposal is created.Voting Period‚Äãfunction votingPeriod() returns (uint)CopyReturns the duration of voting on a proposal, in blocks.Get Actions‚Äãfunction getActions(uint proposalId) returns (uint proposalId) public view returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas)CopyGets the actions of a selected proposal. Pass a proposal ID and get the targets, values, signatures and calldatas of that proposal.NameTypeproposalIduintID of the proposalReturns:Array of addresses of contracts the proposal calls.Array of unsigned integers the proposal uses as values.Array of strings of the proposal‚Äôs signatures.Array of calldata bytes of the proposal.Get Receipt‚Äãfunction getReceipt(uint proposalId, address voter) returns (Receipt memory)CopyReturns a proposal ballot receipt of a given voter.NameTypeproposalIduintID of the proposal in which to get a voter‚Äôs ballot receipt.voteraddressAddress of the account of a proposal voter.ReceiptstructA Receipt struct for the ballot of the voter address.State‚Äãfunction state(uint proposalId) returns (ProposalState)CopyReturns enum of type ProposalState, possible types are:
-Pending
-Active
-Canceled
-Defeated
-Succeeded
-Queued
-Expired
-andExecutedNameTypeproposalIduintID of the proposalState-Changing Functions: Governor AlphaPropose‚Äãfunction propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description) returns (uint)CopyCreates a Proposal to change the protocol.Proposals will be voted on by delegated voters. If there is sufficient support before the voting period ends, the proposal shall be automatically enacted. Enacted proposals are queued and executed in the Timelock contract.The sender must hold more UNI than the current proposal threshold (proposalThreshold()) as of the immediately previous block. The proposal can have up to 10 actions (based on proposalMaxOperations()).The proposer cannot create another proposal if they currently have a pending or active proposal. It is not possible to queue two identical actions in the same block (due to a restriction in the Timelock), therefore actions in a single proposal must be unique, and unique proposals that share an identical action must be queued in different blocks.NameTypetargetsaddressThe ordered list of target addresses for calls to be made during proposal execution. This array must be the same length as all other array parameters in this function.valuesuintThe ordered list of values (i.e. msg.value) to be passed to the calls made during proposal execution. This array must be the same length as all other array parameters in this functionsignaturesstringThe ordered list of function signatures to be passed during execution. This array must be the same length as all other array parameters in this function.calldatasbytesThe ordered list of data to be passed to each individual function call during proposal execution. This array must be the same length as all other array parameters in this function.descriptionstringA human readable description of the proposal and the changes it will enact.UnnameduintReturns ID of the new proposalQueue‚Äãfunction queue(uint proposalId)CopyAfter a proposal has succeeded, any address can call the queue method to move the proposal into the Timelock queue. A proposal can only be queued if it has succeeded.NameTypeproposalIduintID of a given successful proposalExecute‚Äãfunction execute(uint proposalId) payableCopyAfter the Timelock delay period, any account may invoke the execute method to apply the changes from the proposal to the target contracts. This will invoke each of the actions described in the proposal.
This function is payable so the Timelock contract can invoke payable functions that were selected in the proposal.NameTypeproposalIduintID of a given successful proposalCancel‚Äãfunction queue(uint proposalId)CopyCancel a proposal that has not yet been executed. The Guardian is the only one who may execute this unless the proposer does not maintain the delegates required to create a proposal. If the proposer does not have more delegates than the proposal threshold, anyone can cancel the proposal.NameTypeproposalIduintID of a proposal to cancelCast Vote‚Äãfunction castVote(uint proposalId, bool support)CopyCast a vote on a proposal. The account's voting weight is determined by it's number of delegated votes at the time the proposal becomes active.NameTypeproposalIduintID of a given successful proposalsupportboolA boolean of true for 'yes' or false for 'no' on the proposal vote.Cast Vote By Signature‚Äãfunction castVoteBySig(uint proposalId, bool support, uint8 v, bytes32 r, bytes32 s)CopyCast a vote on a proposal. The account's voting weight is determined by its number of delegated votes at the time the proposal became active. This method has the same purpose as Cast Vote, but instead enables offline signatures to participate in governance voting. For more details on how to create an offline signature, review EIP-712.NameTypeproposalIduintID of a given successful proposalsupportboolA boolean of true for 'yes' or false for 'no' on the proposal vote.expiryuintThe time when the signature expires. A block timestamp in seconds since the unix epoch.vuintThe recovery byte of the signature.rbytes32Half of the ECDSA signature pair.sbytes32Half of the ECDSA signature pair.Edit this pageHelpful?PreviousQueriesNextFactoryTimelockDelegateChangedDelegateVotesChangedProposalCreatedVoteCastProposalCanceledProposalQueuedProposalExecutedGet Current VotesGet Prior VotesDelegateDelegate By SignatureQuorum VotesProposal ThresholdProposal Max OperationsVoting DelayVoting PeriodGet ActionsGet ReceiptStateProposeQueueExecuteCancelCast VoteCast Vote By SignatureDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



