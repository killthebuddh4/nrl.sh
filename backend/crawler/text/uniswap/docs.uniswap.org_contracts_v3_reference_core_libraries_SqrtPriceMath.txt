








SqrtPriceMath | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 ProtocolOverviewGuidesSet Up Your Local EnvironmentImplement A SwapProviding LiquidityLiquidity MiningImplement Flash SwapsGovernance ProposalsTechnical ReferenceOverviewCoreUniswapV3FactoryUniswapV3PoolUniswapV3PoolDeployerInterfacesLibrariesBitMathFixedPoint128FixedPoint96FullMathLiquidityMathLowGasSafeMathOraclePositionSafeCastSecondsOutsideSqrtPriceMathSwapMathTickTickBitmapTickMathTransferHelperUnsafeMathGovernancePeripheryDeployment AddressesError CodesUniversal RouterPermit2V2 ProtocolV1 Protocolüè†V3 ProtocolTechnical ReferenceCoreLibrariesSqrtPriceMathHelpful?On this pageSqrtPriceMathContains the math that uses square root of price as a Q64.96 and liquidity to compute deltasFunctions‚ÄãgetNextSqrtPriceFromAmount0RoundingUp‚Äã  function getNextSqrtPriceFromAmount0RoundingUp(    uint160 sqrtPX96,    uint128 liquidity,    uint256 amount,    bool add  ) internal pure returns (uint160)CopyGets the next sqrt price given a delta of token0Always rounds up, because in the exact output case (increasing price) we need to move the price at least
far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the
price less in order to not send too much output.
The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),
if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).Parameters:‚ÄãNameTypeDescriptionsqrtPX96uint160The starting price, i.e. before accounting for the token0 deltaliquidityuint128The amount of usable liquidityamountuint256How much of token0 to add or remove from virtual reservesaddboolWhether to add or remove the amount of token0Return Values:‚ÄãTypeDescriptionuint160price after adding or removing amount, depending on addgetNextSqrtPriceFromAmount1RoundingDown‚Äã  function getNextSqrtPriceFromAmount1RoundingDown(    uint160 sqrtPX96,    uint128 liquidity,    uint256 amount,    bool add  ) internal pure returns (uint160)CopyGets the next sqrt price given a delta of token1Always rounds down, because in the exact output case (decreasing price) we need to move the price at least
far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the
price less in order to not send too much output.
The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidityParameters:‚ÄãNameTypeDescriptionsqrtPX96uint160The starting price, i.e., before accounting for the token1 deltaliquidityuint128The amount of usable liquidityamountuint256How much of token1 to add, or remove, from virtual reservesaddboolWhether to add, or remove, the amount of token1Return Values:‚ÄãTypeDescriptionuint160price after adding or removing amountgetNextSqrtPriceFromInput‚Äã  function getNextSqrtPriceFromInput(    uint160 sqrtPX96,    uint128 liquidity,    uint256 amountIn,    bool zeroForOne  ) internal pure returns (uint160 sqrtQX96)CopyGets the next sqrt price given an input amount of token0 or token1Throws if price or liquidity are 0, or if the next price is out of boundsParameters:‚ÄãNameTypeDescriptionsqrtPX96uint160The starting price, i.e., before accounting for the input amountliquidityuint128The amount of usable liquidityamountInuint256How much of token0, or token1, is being swapped inzeroForOneboolWhether the amount in is token0 or token1Return Values:‚ÄãNameTypeDescriptionsqrtQX96uint160The price after adding the input amount to token0 or token1getNextSqrtPriceFromOutput‚Äã  function getNextSqrtPriceFromOutput(    uint160 sqrtPX96,    uint128 liquidity,    uint256 amountOut,    bool zeroForOne  ) internal pure returns (uint160 sqrtQX96)CopyGets the next sqrt price given an output amount of token0 or token1Throws if price or liquidity are 0 or the next price is out of boundsParameters:‚ÄãNameTypeDescriptionsqrtPX96uint160The starting price before accounting for the output amountliquidityuint128The amount of usable liquidityamountOutuint256How much of token0, or token1, is being swapped outzeroForOneboolWhether the amount out is token0 or token1Return Values:‚ÄãNameTypeDescriptionsqrtQX96uint160The price after removing the output amount of token0 or token1getAmount0Delta‚Äã  function getAmount0Delta(    uint160 sqrtRatioAX96,    uint160 sqrtRatioBX96,    uint128 liquidity,    bool roundUp  ) internal pure returns (uint256 amount0)CopyGets the amount0 delta between two pricesCalculates liquidity / sqrt(lower) - liquidity / sqrt(upper),
i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))Parameters:‚ÄãNameTypeDescriptionsqrtRatioAX96uint160A sqrt pricesqrtRatioBX96uint160Another sqrt priceliquidityuint128The amount of usable liquidityroundUpboolWhether to round the amount up or downReturn Values:‚ÄãNameTypeDescriptionamount0uint256Amount of token0 required to cover a position of size liquidity between the two passed pricesgetAmount1Delta‚Äã  function getAmount1Delta(    uint160 sqrtRatioAX96,    uint160 sqrtRatioBX96,    uint128 liquidity,    bool roundUp  ) internal pure returns (uint256 amount1)CopyGets the amount1 delta between two pricesCalculates liquidity * (sqrt(upper) - sqrt(lower))Parameters:‚ÄãNameTypeDescriptionsqrtRatioAX96uint160A sqrt pricesqrtRatioBX96uint160Another sqrt priceliquidityuint128The amount of usable liquidityroundUpboolWhether to round the amount up, or downReturn Values:‚ÄãNameTypeDescriptionamount1uint256Amount of token1 required to cover a position of size liquidity between the two passed pricesgetAmount0Delta‚Äã  function getAmount0Delta(    uint160 sqrtRatioAX96,    uint160 sqrtRatioBX96,    int128 liquidity  ) internal pure returns (int256 amount0)CopyHelper that gets signed token0 deltaParameters:‚ÄãNameTypeDescriptionsqrtRatioAX96uint160A sqrt pricesqrtRatioBX96uint160Another sqrt priceliquidityint128The change in liquidity for which to compute the amount0 deltaReturn Values:‚ÄãNameTypeDescriptionamount0int256Amount of token0 corresponding to the passed liquidityDelta between the two pricesgetAmount1Delta‚Äã  function getAmount1Delta(    uint160 sqrtRatioAX96,    uint160 sqrtRatioBX96,    int128 liquidity  ) internal pure returns (int256 amount1)CopyHelper that gets signed token1 deltaParameters:‚ÄãNameTypeDescriptionsqrtRatioAX96uint160A sqrt pricesqrtRatioBX96uint160Another sqrt priceliquidityint128The change in liquidity for which to compute the amount1 deltaReturn Values:‚ÄãNameTypeDescriptionamount1int256Amount of token1 corresponding to the passed liquidityDelta between the two pricesEdit this pageHelpful?PreviousSecondsOutsideNextSwapMathFunctionsgetNextSqrtPriceFromAmount0RoundingUpgetNextSqrtPriceFromAmount1RoundingDowngetNextSqrtPriceFromInputgetNextSqrtPriceFromOutputgetAmount0DeltagetAmount1DeltagetAmount0DeltagetAmount1DeltaDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



