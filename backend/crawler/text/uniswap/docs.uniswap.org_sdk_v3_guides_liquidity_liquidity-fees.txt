








Collecting Fees | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 SDKOverviewGuidesBackgroundGetting a QuoteExecuting a TradeRouting a SwapPooling LiquidityMinting a PositionAdding & Removing LiquidityCollecting FeesSwapping and Adding LiquidityTechnical ReferenceSwap Widgetweb3-reactCore SDKV2 SDKV1 SDKüè†V3 SDKGuidesPooling LiquidityCollecting FeesHelpful?On this pageCollecting FeesIntroduction‚ÄãThis guide will cover how to collect fees from a liquidity position on the Uniswap V3 protocol. It is based on the collecting fees code example, found in the Uniswap code examples repository. To run this example, check out the examples's README and follow the setup instructions.infoIf you need a briefer on the SDK and to learn more about how these guides connect to the examples repository, please visit our background page!In the Uniswap V3 protocol, liquidity positions are represented using non-fungible tokens. In this guide we will use the NonfungiblePositionManager class to help us mint a liquidity position for the  USDC - DAI pair. We will then attempt to collect any fees that the position has accrued from those trading against our provisioned liquidity. The inputs to our guide are the two tokens that we are pooling for, the amount of each token we are pooling for, the Pool fee and the max amount of accrued fees we want to collect for each token.The guide will cover:Setting up our fee collectionSubmitting our fee collection transactionAt the end of the guide, given the inputs above, we should be able to collect the accrued fees (if any) of a minted position with the press of a button and see the change reflected in our position and the balance of our tokens.For this guide, the following Uniswap packages are used:@uniswap/v3-sdk@uniswap/sdk-coreThe core code of this guide can be found in collectFees().noteThis guide assumes you are familiar with our Minting a Position guide. A minted position is required to add or remove liquidity from, so the buttons will be disabled until a position is minted.Also note that we do not need to give approval to the NonfungiblePositionManager to transfer our tokens as we will have already done that when minting our position.Setting up our fee collection‚ÄãAll of the fee collecting logic can be found in the collectFees function. Notice how the Collect Fees button is disabled until a position is minted. This happens because there will be no fees to collect unless there is a position whose liquidity has been traded against.To start, we construct an options object of type  CollectOptions that holds the data about the fees we want to collect:Constructing the CollectOptionsloading...CopyView on GithubSimilar to the other functions exposed by the NonfungiblePositionManager, we pass the tokenId and the recipient of the fees, which in this case is our function's input position id and our wallet's address.The other two CurrencyAmount parameters (expectedCurrencyOwed0 and expectedCurrencyOwed1) define the maximum amount of currency we expect to get collect through accrued fees of each token in the pool. We set these through our guide's configuration.Submitting our fee collection transaction‚ÄãWe then get the call parameters for collecting our fees from our NonfungiblePositionManager using the constructed CollectOptions:Getting the calldata and value for the transactionloading...CopyView on GithubThe function above returns the calldata and value required to construct the transaction for collecting accrued fees. Now that we have both the calldata and value we needed for the transaction, we can build and execute the it:Building and submitting the transactionloading...CopyView on GithubAfter pressing the button, if someone has traded against our position, we should be able to note how the balance of USDC and DAI increases as we collect fees.Next Steps‚ÄãThe previous guides detail all the atomic steps needed to create and manage positions. However, these approaches may not use all of your desired currency. To ensure you are using your full funds while minimizing gas prices, check out our guide on Swapping and Adding Liquidity in a single transaction!Helpful?PreviousAdding & Removing LiquidityNextSwapping and Adding LiquidityIntroductionSetting up our fee collectionSubmitting our fee collection transactionNext StepsDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



