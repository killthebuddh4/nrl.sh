








Technical Reference | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 ProtocolOverviewGuidesSet Up Your Local EnvironmentImplement A SwapProviding LiquidityLiquidity MiningImplement Flash SwapsGovernance ProposalsTechnical ReferenceUniversal RouterOverviewTechnical ReferencePermit2V2 ProtocolV1 Protocolüè†Universal RouterTechnical ReferenceHelpful?On this pageTechnical ReferenceFunctions‚ÄãTransactions to the UniversalRouter all go through the UniversalRouter.execute functions:execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline)execute(bytes calldata commands, bytes[] calldata inputs)The first of these functions adds the functionality to allow transactions to have a transaction deadline. If the block.timestamp is after the deadline provided the transaction will revert. After that check, the 2 functions otherwise execute identically.The execute functions work like a simplified VM - they take in a list of commands, and a list of inputs for the commands and execute them in the order specified.Command Structure‚ÄãThe first parameter for the function (bytes calldata commands) is a list of commands for the contract to execute, in the order they should be executed. Each command is encoded in 1 byte, containing the following split of 8 bits:01 23 4 5 6 7frcommandf‚ÄãA single bit flag, that signals whether or not the command should be allowed to revert without the whole transaction failing.If f is 0 aka false and the command reverts, then the entire transaction will revert and none of the commands will be executed.If f is 1 aka true and the command reverts, then the transaction will continue, allowing us to achieve partial fills. If using this flag, be careful to include further commands that will remove any funds that could be left unused in the UniversalRouter contract.r‚Äã2 unused bytes, reserved for future use. Leaving these 2 bits as 0 will save gas, but any value passed into the contract will be ignored. Later versions of the UniversalRouter will likely expand the 5 bits used for command to use at least 1 of these bits.command‚ÄãA 5 bit unique identifier for the command that should be carried out. The values of these commands can be found within Commands.sol, or can be viewed in the table below.The command types that are not defined do not have an assigned command at this moment in time. Providing one of these identifiers will cause the transaction to revert with InvalidCommandType.A complete list of commands can be found in the table below:CommandValue0x00V3_SWAP_EXACT_IN0x01V3_SWAP_EXACT_OUT0x02PERMIT2_TRANSFER_FROM0x03PERMIT2_PERMIT_BATCH0x04SWEEP0x05TRANSFER0x06PAY_PORTION0x070x08V2_SWAP_EXACT_IN0x09V2_SWAP_EXACT_OUT0x0aPERMIT2_PERMIT0x0bWRAP_ETH0x0cUNWRAP_WETH0x0dPERMIT2_TRANSFER_FROM_BATCH0x0e0x0f0x10SEAPORT0x11LOOKS_RARE_7210x12NFTX0x13CRYPTOPUNKS0x14LOOKS_RARE_11550x15OWNER_CHECK_7210x16OWNER_CHECK_11550x17SWEEP_ERC7210x18X2Y2_7210x19SUDOSWAP0x1aNFT200x1bX2Y2_11550x1cFOUNDATION0x1dSWEEP_ERC11550x1e0x1fCommand Inputs‚ÄãThe second parameter for the function is an array of bytes strings. Each element in the array is the abi-encoded input that will be used for the respective command.commands[i] is the command that will use inputs[i] as its encoded input parameters.The router uses the command type to know how to decode the encoded input parameters - depending on the command chosen, the required inputs is different.The input parameters required for each command are outlined below:V3_SWAP_EXACT_IN‚Äãaddress The recipient of the output of the tradeuint256 The amount of input tokens for the tradeuint256 The minimum amount of output tokens the user wantsbytes The UniswapV3 encoded path to trade alongbool A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouterV3_SWAP_EXACT_OUT‚Äãaddress The recipient of the output of the tradeuint256 The amount of output tokens to receiveuint256 The maximum number of input tokens that should be spentbytes The UniswapV3 encoded path to trade alongbool A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouterPERMIT2_TRANSFER_FROM‚Äãaddress The token to fetch from Permit2address The recipient of the tokens fetcheduint256 The amount of token to fetchThe individual that the tokens are fetched from is always the msg.sender of the transactionPERMIT2_PERMIT_BATCH‚ÄãIAllowanceTransfer.PermitBatch A PermitBatch struct outlining all of the Permit2 permits to execute.bytes The signature to provide to Permit2The individual that signed the permits must be the msg.sender of the transactionSWEEP‚Äãaddress The ERC20 token to sweep (or Constants.ETH for ETH)address The recipient of the sweepuint256 The minimum required tokens to receive from the sweepTRANSFER‚Äãaddress The ERC20 token to transfer (or Constants.ETH for ETH)address The recipient of the transferuint256 The amount to transferPAY_PORTION‚Äãaddress The ERC20 token to transfer (or Constants.ETH for ETH)address The recipient of the transferuint256 In basis points, the percentage of the contract‚Äôs balance to transferV2_SWAP_EXACT_IN‚Äãaddress The recipient of the output of the tradeuint256 The amount of input tokens for the tradeuint256 The minimum amount of output tokens the user wantsaddress[] The UniswapV2 token path to trade alongbool A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouterV2_SWAP_EXACT_OUT‚Äãaddress The recipient of the output of the tradeuint256 The amount of output tokens to receiveuint256 The maximum number of input tokens that should be spentaddress[] The UniswapV2 token path to trade alongbool A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouterPERMIT2_PERMIT‚ÄãIAllowanceTransfer.PermitSingle A PermitSingle struct outlining the Permit2 permit to executebytes The signature to provide to Permit2The individual that signed the permit must be the msg.sender of the transactionWRAP_ETH‚Äãaddress The recipient of the WETHuint256 The amount of ETH to wrapUNWRAP_ETH‚Äãaddress The recipient of the ETHuint256 The minimum required ETH to receive from the unwrappingPERMIT2_TRANSFER_FROM_BATCH‚ÄãIAllowanceTransfer.AllowanceTransferDetails[] An array of AllowanceTransferDetails structs that each describe a Permit2 transfer to performSEAPORT‚Äãuint256 The ETH value to forward to the Seaport contractbytes The calldata to use to call the Seaport contractLOOKS_RARE_721‚Äãuint256 The ETH value to forward to the LooksRare contractbytes The calldata to use to call the LooksRare contractaddress The recipient of the ERC721address The ERC721 token addressuint256 The ID of the ERC721NFTX‚Äãuint256 The ETH value to forward to the NFTX contractbytes The calldata to use to call the NFTX contractCRYPTOPUNKS‚Äãuint256 The PunkID to purchaseaddress The recipient for the cryptopunkuint256 The ETH value to forward to the Cryptopunks contractLOOKS_RARE_1155‚Äãuint256 The ETH value to forward to the LooksRare contractbytes The calldata to use to call the LooksRare contractaddress The recipient of the ERC1155address The ERC1155 token addressuint256 The ID of the ERC1155uint256 The amount of the ERC1155 to transferOWNER_CHECK_721‚Äãaddress The required owner of the ERC721address The ERC721 token addressuint256 The ID of the ERC721OWNER_CHECK_1155‚Äãaddress The required owner of the ERC1155address The ERC721 token addressuint256 The ID of the ERC1155uint256 The minimum required amount of the ERC1155SWEEP_ERC721‚Äãaddress The ERC721 token address to transferaddress The recipient of the transferuint256 The token ID to transferX2Y2_721‚Äãuint256 The ETH value to forward to the X2Y2 contractbytes The calldata to use to call the X2Y2 contractaddress The recipient of the ERC721address The ERC721 token addressuint256 The ID of the ERC721SUDOSWAP‚Äãuint256 The ETH value to forward to the Sudoswap contractbytes The calldata to use to call the Sudoswap contractNFT20‚Äãuint256 The ETH value to forward to the NFT20 contractbytes The calldata to use to call the NFT20 contractX2Y2_1155‚Äãuint256 The ETH value to forward to the X2Y2 contractbytes The calldata to use to call the X2Y2 contractaddress The recipient of the ERC1155address The ERC1155 token addressuint256 The ID of the ERC1155uint256 The amount of the ERC1155 to transferFOUNDATION‚Äãuint256 The ETH value to forward to the Foundation contractbytes The calldata to use to call the Foundation contractaddress The recipient of the ERC721address The ERC721 token addressuint256 The ID of the ERC721SWEEP_ERC1155‚Äãaddress The ERC1155 token address to sweepaddress The recipient of the sweepuint256 The token ID to sweepuint256 The minimum required tokens to receive from the sweepExample: Reverting Commands‚ÄãFor a Sudoswap command, that should be allowed to revert, the following 8 bit command should be provided:command = 0x80 (10000000) && 0x19 (00011001) = 0x99 (10011001)CopyTake care when working with reverting commands - ensure you have appended commands to deal with funds that could remain in the contract after either outcomes. For example, if the Sudoswap command reverts, a following SWEEP can be added to ensure that any ETH that was not spent does not get left in the router.Edit this pageHelpful?PreviousOverviewNextOverviewFunctionsCommand StructurefrcommandCommand InputsV3_SWAP_EXACT_INV3_SWAP_EXACT_OUTPERMIT2_TRANSFER_FROMPERMIT2_PERMIT_BATCHSWEEPTRANSFERPAY_PORTIONV2_SWAP_EXACT_INV2_SWAP_EXACT_OUTPERMIT2_PERMITWRAP_ETHUNWRAP_ETHPERMIT2_TRANSFER_FROM_BATCHSEAPORTLOOKS_RARE_721NFTXCRYPTOPUNKSLOOKS_RARE_1155OWNER_CHECK_721OWNER_CHECK_1155SWEEP_ERC721X2Y2_721SUDOSWAPNFT20X2Y2_1155FOUNDATIONSWEEP_ERC1155Example: Reverting CommandsDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



