








Tick | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 ProtocolOverviewGuidesSet Up Your Local EnvironmentImplement A SwapProviding LiquidityLiquidity MiningImplement Flash SwapsGovernance ProposalsTechnical ReferenceOverviewCoreUniswapV3FactoryUniswapV3PoolUniswapV3PoolDeployerInterfacesLibrariesBitMathFixedPoint128FixedPoint96FullMathLiquidityMathLowGasSafeMathOraclePositionSafeCastSecondsOutsideSqrtPriceMathSwapMathTickTickBitmapTickMathTransferHelperUnsafeMathGovernancePeripheryDeployment AddressesError CodesUniversal RouterPermit2V2 ProtocolV1 Protocol🏠V3 ProtocolTechnical ReferenceCoreLibrariesTickHelpful?On this pageTickContains functions for managing tick processes and relevant calculationsFunctions​tickSpacingToMaxLiquidityPerTick​  function tickSpacingToMaxLiquidityPerTick(    int24 tickSpacing  ) internal pure returns (uint128)CopyDerives max liquidity per tick from given tick spacingExecuted within the pool constructorParameters:​NameTypeDescriptiontickSpacingint24The amount of required tick separation, realized in multiples of tickSpacing e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...Return Values:​TypeDescriptionuint128max liquidity per tickgetFeeGrowthInside​  function getFeeGrowthInside(    mapping(int24 => struct Tick.Info) self,    int24 tickLower,    int24 tickUpper,    int24 tickCurrent,    uint256 feeGrowthGlobal0X128,    uint256 feeGrowthGlobal1X128  ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128)CopyRetrieves fee growth dataParameters:​NameTypeDescriptionselfmapping(int24 => struct Tick.Info)The mapping containing all tick information for initialized tickstickLowerint24The lower tick boundary of the positiontickUpperint24The upper tick boundary of the positiontickCurrentint24The current tickfeeGrowthGlobal0X128uint256The all-time global fee growth, per unit of liquidity, in token0feeGrowthGlobal1X128uint256The all-time global fee growth, per unit of liquidity, in token1Return Values:​NameTypeDescriptionfeeGrowthInside0X128uint256The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundariesfeeGrowthInside1X128uint256The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundariesupdate​  function update(    mapping(int24 => struct Tick.Info) self,    int24 tick,    int24 tickCurrent,    int128 liquidityDelta,    uint256 feeGrowthGlobal0X128,    uint256 feeGrowthGlobal1X128,    bool upper,    uint128 maxLiquidity  ) internal returns (bool flipped)CopyUpdates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versaParameters:​NameTypeDescriptionselfmapping(int24 => struct Tick.Info)The mapping containing all tick information for initialized tickstickint24The tick that will be updatedtickCurrentint24The current tickliquidityDeltaint128A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)feeGrowthGlobal0X128uint256The all-time global fee growth, per unit of liquidity, in token0feeGrowthGlobal1X128uint256The all-time global fee growth, per unit of liquidity, in token1upperbooltrue for updating a position's upper tick, or false for updating a position's lower tickmaxLiquidityuint128The maximum liquidity allocation for a single tickReturn Values:​NameTypeDescriptionflippedboolWhether the tick was flipped from initialized to uninitialized, or vice versaclear​  function clear(    mapping(int24 => struct Tick.Info) self,    int24 tick  ) internalCopyClears tick dataParameters:​NameTypeDescriptionselfmapping(int24 => struct Tick.Info)The mapping containing all initialized tick information for initialized tickstickint24The tick that will be clearedcross​  function cross(    mapping(int24 => struct Tick.Info) self,    int24 tick,    uint256 feeGrowthGlobal0X128,    uint256 feeGrowthGlobal1X128  ) internal returns (int128 liquidityNet)CopyTransitions to next tick as needed by price movementParameters:​NameTypeDescriptionselfmapping(int24 => struct Tick.Info)The mapping containing all tick information for initialized tickstickint24The destination tick of the transitionfeeGrowthGlobal0X128uint256The all-time global fee growth, per unit of liquidity, in token0feeGrowthGlobal1X128uint256The all-time global fee growth, per unit of liquidity, in token1Return Values:​NameTypeDescriptionliquidityNetint128The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)Edit this pageHelpful?PreviousSwapMathNextTickBitmapFunctionstickSpacingToMaxLiquidityPerTickgetFeeGrowthInsideupdateclearcrossDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



