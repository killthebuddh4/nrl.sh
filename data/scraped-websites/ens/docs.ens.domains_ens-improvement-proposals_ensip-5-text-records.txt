





ENSIP-5: Text Records - ENS Documentation










ENS DocumentationTechnical DocumentationHomeTechnical DocsGovernance DocsSearch…⌃KLinksTechnical DocumentationIntroductionTerminologyFrequently Asked QuestionsENS DeploymentsRegistrar Frequently Asked QuestionsDeploying ENS on a Private ChainDNS Registrar guideBug Bounty ProgramENS Improvement ProposalsENSIP-1: ENSENSIP-2: Initial Hash RegistrarENSIP-3: Reverse ResolutionENSIP-4: Support for contract ABIsENSIP-5: Text RecordsENSIP-6: DNS-in-ENSENSIP-7: Contenthash fieldENSIP-8: Interface DiscoveryENSIP-9: Multichain Address ResolutionENSIP-10: Wildcard ResolutionENSIP-11: EVM compatible Chain Address ResolutionENSIP-12: Avatar Text RecordsENSIP-13: SAFE Authentication for ENSENSIP-14: On-chain Source ParameterDapp Developer GuideENS Enabling your DAppENS LibrariesWorking with ENSResolving NamesManaging NamesRegistering & Renewing NamesENS Front-End Design GuidelinesENS as NFTENS Layer2 and offchain data supportENS Data guideContract API ReferenceName ProcessingRegistryReverseRegistrarTestRegistrarPublicResolver.eth Permanent RegistrarDNS RegistrarSubgraphContract Developer GuideResolving Names On-chainWriting a ResolverWriting a RegistrarENS Discussion ForumENS Support ChatENS Migration (February 2020)Guide for DApp DevelopersTechnical DescriptionPowered By GitBookENSIP-5: Text RecordsA standard for storage of text records in ENS (formerly EIP-634).AuthorRichard Moore (@ricmoo)StatusFinalSubmitted2017-05-17AbstractThis ENSIP defines a resolver profile for ENS that permits the lookup of arbitrary key-value text data. This allows ENS name holders to associate e-mail addresses, URLs and other informational data with a ENS name.MotivationThere is often a desire for human-readable metadata to be associated with otherwise machine-driven data; used for debugging, maintenance, reporting and general information.In this ENSIP we define a simple resolver profile for ENS that permits ENS names to associate arbitrary key-value text.SpecificationResolver ProfileA new resolver interface is defined, consisting of the following method:interface IERC634 { /// @notice Returns the text data associated with a key for an ENS name /// @param node A nodehash for an ENS name /// @param key A key to lookup text data for /// @return The text data function text(bytes32 node, string key) view returns (string text);}The EIP-165 interface ID of this interface is 0x59d1d43c.The text data may be any arbitrary UTF-8 string. If the key is not present, the empty string must be returned.Global KeysGlobal Keys must be made up of lowercase letters, numbers and the hyphen (-).avatar - a URL to an image used as an avatar or logodescription - A description of the namedisplay - a canonical display name for the ENS name; this MUST match the ENS name when its case is folded, and clients should ignore this value if it does not (e.g. "ricmoo.eth" could set this to "RicMoo.eth")email - an e-mail addresskeywords - A list of comma-separated keywords, ordered by most significant first; clients that interpresent this field may choose a threshold beyond which to ignoremail - A physical mailing addressnotice - A notice regarding this namelocation - A generic location (e.g. "Toronto, Canada")phone - A phone number as an E.164 stringurl - a website URLService KeysService Keys must be made up of a reverse dot notation for a namespace which the service owns, for example, DNS names (e.g. .com, .io, etc) or ENS name (i.e. .eth). Service Keys must contain at least one dot.This allows new services to start using their own keys without worrying about colliding with existing services and also means new services do not need to update this document.The following services are common, which is why recommendations are provided here, but ideally a service would declare its own key.com.github - a GitHub usernamecom.peepeth - a Peepeth usernamecom.linkedin - a LinkedIn usernamecom.twitter - a Twitter usernameio.keybase - a Keybase usernameorg.telegram - a Telegram usernameThis technique also allows for a service owner to specify a hierarchy for their keys, such as:com.example.userscom.example.groupscom.example.groups.publiccom.example.groups.privateLegacy KeysThe following keys were specified in earlier versions of this ENSIP.Their use is not likely very wide, but applications attempting maximal compatibility may wish to query these keys as a fallback if the above replacement keys fail.vnd.github - a GitHub username (renamed to com.github)vnd.peepeth - a peepeth username (renamed to com.peepeth)vnd.twitter - a Twitter username (renamed to com.twitter)RationaleApplication-specific vs general-purpose record typesRather than define a large number of specific record types (each for generally human-readable data) such as url and email, we follow an adapted model of DNS's TXT records, which allow for a general keys and values, allowing future extension without adjusting the resolver, while allowing applications to use custom keys for their own purposes.Backwards CompatibilityNot applicable.Security ConsiderationsNone.CopyrightCopyright and related rights waived via CC0.PreviousENSIP-4: Support for contract ABIsNextENSIP-6: DNS-in-ENSLast modified 1yr agoCopy linkEdit on GitHubOn this pageAbstractMotivationSpecificationRationaleBackwards CompatibilitySecurity ConsiderationsCopyright



