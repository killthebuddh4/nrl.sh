





ENSIP-11: EVM compatible Chain Address Resolution - ENS Documentation













ENS DocumentationTechnical DocumentationHomeTechnical DocsGovernance DocsSearch…⌃KLinksTechnical DocumentationIntroductionTerminologyFrequently Asked QuestionsENS DeploymentsRegistrar Frequently Asked QuestionsDeploying ENS on a Private ChainDNS Registrar guideBug Bounty ProgramENS Improvement ProposalsENSIP-1: ENSENSIP-2: Initial Hash RegistrarENSIP-3: Reverse ResolutionENSIP-4: Support for contract ABIsENSIP-5: Text RecordsENSIP-6: DNS-in-ENSENSIP-7: Contenthash fieldENSIP-8: Interface DiscoveryENSIP-9: Multichain Address ResolutionENSIP-10: Wildcard ResolutionENSIP-11: EVM compatible Chain Address ResolutionENSIP-12: Avatar Text RecordsENSIP-13: SAFE Authentication for ENSENSIP-14: On-chain Source ParameterDapp Developer GuideENS Enabling your DAppENS LibrariesWorking with ENSResolving NamesManaging NamesRegistering & Renewing NamesENS Front-End Design GuidelinesENS as NFTENS Layer2 and offchain data supportENS Data guideContract API ReferenceName ProcessingRegistryReverseRegistrarTestRegistrarPublicResolver.eth Permanent RegistrarDNS RegistrarSubgraphContract Developer GuideResolving Names On-chainWriting a ResolverWriting a RegistrarENS Discussion ForumENS Support ChatENS Migration (February 2020)Guide for DApp DevelopersTechnical DescriptionPowered By GitBookENSIP-11: EVM compatible Chain Address ResolutionIntroduces coinType for EVM compatible chains (amending ENSIP9).AuthorMakoto Inoue <[email protected]>StatusDraftSubmitted2022-01-13AbstractThis ENSIP extends ENSIP 9 (multichain address resolution), dedicates a range of coin types for EVM compatible chains, and specifies a way to derive EVM chain IDs to the designated coin types.The dedicated range uses over 0x80000000 (2147483648) which is reserved under ENSIP 9 so there will be no possibility of coin type collision with other non EVM coin types to be added in future. However, some of coin types previously allocated to EVM chain ides will be deprecated.MotivationThe existing ENSIP 9 relies on the existence of coin types on SLIP44 which was designed to define address encoding type for deterministic wallets. As the majority of EVM compatible chains inherit the same encoding type as Ethereum, it is redundant to keep requesting the addition of EVM compatible chains into SLIP 44. This specification standardises a way to derive coinType based on Chain ID.SpecificationThis specification amends ENSIP 9 to specify that coin types with the most-significant bit set are to be treated as EVM chain IDs. The MSB is reserved in SLIP44 for other purposes relating to HD wallet key derivation, so no coin types exist in this range.To compute the new coin type for EVM chains, bitwise-OR the chain ID with 0x80000000: 0x80000000 | chainId.export const convertEVMChainIdToCoinType = (chainId: number) =>{ return (0x80000000 | chainId) >>> 0}And to reverse the operation, bitwise-AND the cointType with 0x7fffffff: 0x7fffffff & coinType.export const convertCoinTypeToEVMChainId = (coinType: number) =>{ return (0x7fffffff & coinType) >> 0}ImplementationAn implementation of this interface is provided in the ensdomains/address-encoder repository.ExampleTo compute the new coin type for EVM chains, call convertEVMChainIdToCoinType(chainId)const encoder = require('@ensdomains/address-encoder')>  encoder.convertEVMChainIdToCoinType(61)2147483709> encoder.convertCoinTypeToEVMChainId(2147483709)61You can also use existing functions formatsByName and formatsByCoinType to derive these chain IDs> encoder.formatsByName['XDAI']{ coinType: 2147483748, decoder: [Function (anonymous)], encoder: [Function (anonymous)], name: 'XDAI'}> encoder.formatsByCoinType[2147483748]{ coinType: 2147483748, decoder: [Function (anonymous)], encoder: [Function (anonymous)], name: 'XDAI'}ExceptionsThe following EVM chains are the exception to this standard.AVAX = AVAX has multiple chain address formats, and only c chain is EVM compatibleRSK = RSK has its own additional validationThey will continue using coinType defined at SLIP44Backwards CompatibilityThe following EVM compatible cointypes existed before introducing this new standard.NRGPOATTCELOCLOTOMOEWTTHETAGOFTMXDAIETCWhen you display them for backward compatibility purposes, append _LEGACY to the cointype and make them read only.CopyrightCopyright and related rights waived via CC0.PreviousENSIP-10: Wildcard ResolutionNextENSIP-12: Avatar Text RecordsLast modified 1yr agoCopy linkEdit on GitHubOn this pageAbstractMotivationSpecificationCopyright



