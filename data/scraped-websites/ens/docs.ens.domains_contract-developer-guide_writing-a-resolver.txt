





Writing a Resolver - ENS Documentation









ENS DocumentationTechnical DocumentationHomeTechnical DocsGovernance DocsSearch…⌃KLinksTechnical DocumentationIntroductionTerminologyFrequently Asked QuestionsENS DeploymentsRegistrar Frequently Asked QuestionsDeploying ENS on a Private ChainDNS Registrar guideBug Bounty ProgramENS Improvement ProposalsDapp Developer GuideENS Enabling your DAppENS LibrariesWorking with ENSResolving NamesManaging NamesRegistering & Renewing NamesENS Front-End Design GuidelinesENS as NFTENS Layer2 and offchain data supportENS Data guideContract API ReferenceName ProcessingRegistryReverseRegistrarTestRegistrarPublicResolver.eth Permanent RegistrarDNS RegistrarSubgraphContract Developer GuideResolving Names On-chainWriting a ResolverWriting a RegistrarENS Discussion ForumENS Support ChatENS Migration (February 2020)Guide for DApp DevelopersTechnical DescriptionPowered By GitBookWriting a ResolverResolvers are specified in EIP137. A resolver must implement the following method:function supportsInterface(bytes4 interfaceID) constant returns (bool);supportsInterface is defined in EIP165, and allows callers to determine if a resolver supports a particular record type. Record types are specified as a set of one or more methods that a resolver must implement together. Currently defined record types include:Record typeFunction(s)Interface IDDefined inEthereum addressaddr0x3b3b57de​EIP137​ENS Namename0x691f3431​EIP181​ABI specificationABI0x2203ab56​EIP205​Public keypubkey0xc8690233​EIP619​Text recordstext0x59d1d43c​EIP634​Content hashcontenthash0xbc1c58d1​supportsInterface must also return true for the interfaceID value 0x01ffc9a7, which is the interface ID of supportsInterface itself.Additionally, the content interface was used as a defacto standard for Swarm hashes, and has an interface ID of 0xd8389dc5. New implementations should use contenthash instead.Example ResolverA simple resolver that supports only the addr type might look something like this:contract SimpleResolver {    function supportsInterface(bytes4 interfaceID) constant returns (bool) {        return interfaceID == 0x3b3b57de;    }​    function addr(bytes32 nodeID) constant returns (address) {        return address(this);    }}This trivial resolver always returns its own address as answer to all queries. Practical resolvers may use any mechanism they wish to determine what results to return, though they should be constant, and should minimise gas usage wherever possible.Contract Developer Guide - PreviousResolving Names On-chainNext - Contract Developer GuideWriting a RegistrarLast modified 1yr agoCopy linkEdit on GitHub



