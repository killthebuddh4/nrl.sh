








IUniswapV3PoolActions | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 ProtocolOverviewGuidesSet Up Your Local EnvironmentImplement A SwapProviding LiquidityLiquidity MiningImplement Flash SwapsGovernance ProposalsTechnical ReferenceOverviewCoreUniswapV3FactoryUniswapV3PoolUniswapV3PoolDeployerInterfacesIERC20MinimalIUniswapV3FactoryIUniswapV3PoolIUniswapV3PoolDeployercallbackPoolIUniswapV3PoolActionsIUniswapV3PoolDerivedStateIUniswapV3PoolEventsIUniswapV3PoolImmutablesIUniswapV3PoolOwnerActionsIUniswapV3PoolStateLibrariesGovernancePeripheryDeployment AddressesError CodesUniversal RouterPermit2V2 ProtocolV1 Protocolüè†V3 ProtocolTechnical ReferenceCoreInterfacesPoolIUniswapV3PoolActionsHelpful?On this pageIUniswapV3PoolActionsContains pool methods that can be called by anyoneFunctions‚Äãinitialize‚Äã  function initialize(    uint160 sqrtPriceX96  ) externalCopySets the initial price for the poolPrice is represented as a sqrt(amountToken1/amountToken0) Q64.96 valueParameters:‚ÄãNameTypeDescriptionsqrtPriceX96uint160the initial sqrt price of the pool as a Q64.96mint‚Äã  function mint(    address recipient,    int24 tickLower,    int24 tickUpper,    uint128 amount,    bytes data  ) external returns (uint256 amount0, uint256 amount1)CopyAdds liquidity for the given recipient/tickLower/tickUpper positionThe caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback
in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends
on tickLower, tickUpper, the amount of liquidity, and the current price.Parameters:‚ÄãNameTypeDescriptionrecipientaddressThe address for which the liquidity will be createdtickLowerint24The lower tick of the position in which to add liquiditytickUpperint24The upper tick of the position in which to add liquidityamountuint128The amount of liquidity to mintdatabytesAny data that should be passed through to the callbackReturn Values:‚ÄãNameTypeDescriptionamount0uint256The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callbackamount1uint256The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callbackcollect‚Äã  function collect(    address recipient,    int24 tickLower,    int24 tickUpper,    uint128 amount0Requested,    uint128 amount1Requested  ) external returns (uint128 amount0, uint128 amount1)CopyCollects tokens owed to a positionDoes not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.
Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or
amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the
actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.Parameters:‚ÄãNameTypeDescriptionrecipientaddressThe address which should receive the fees collectedtickLowerint24The lower tick of the position for which to collect feestickUpperint24The upper tick of the position for which to collect feesamount0Requesteduint128How much token0 should be withdrawn from the fees owedamount1Requesteduint128How much token1 should be withdrawn from the fees owedReturn Values:‚ÄãNameTypeDescriptionamount0uint128The amount of fees collected in token0amount1uint128The amount of fees collected in token1burn‚Äã  function burn(    int24 tickLower,    int24 tickUpper,    uint128 amount  ) external returns (uint256 amount0, uint256 amount1)CopyBurn liquidity from the sender and account tokens owed for the liquidity to the positionCan be used to trigger a recalculation of fees owed to a position by calling with an amount of 0
Fees must be collected separately via a call to #collectParameters:‚ÄãNameTypeDescriptiontickLowerint24The lower tick of the position for which to burn liquiditytickUpperint24The upper tick of the position for which to burn liquidityamountuint128How much liquidity to burnReturn Values:‚ÄãNameTypeDescriptionamount0uint256The amount of token0 sent to the recipientamount1uint256The amount of token1 sent to the recipientswap‚Äã  function swap(    address recipient,    bool zeroForOne,    int256 amountSpecified,    uint160 sqrtPriceLimitX96,    bytes data  ) external returns (int256 amount0, int256 amount1)CopySwap token0 for token1, or token1 for token0The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallbackParameters:‚ÄãNameTypeDescriptionrecipientaddressThe address to receive the output of the swapzeroForOneboolThe direction of the swap, true for token0 to token1, false for token1 to token0amountSpecifiedint256The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)sqrtPriceLimitX96uint160The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swapdatabytesAny data passed through to the callbackReturn Values:‚ÄãNameTypeDescriptionamount0int256The delta of the balance of token0 of the pool, exact when negative, minimum when positiveamount1int256The delta of the balance of token1 of the pool, exact when negative, minimum when positiveflash‚Äã  function flash(    address recipient,    uint256 amount0,    uint256 amount1,    bytes data  ) externalCopyReceive token0 and/or token1 and pay it back, plus a fee, in the callbackThe caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback
Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling
with 0 amount{0,1} and sending the donation amount(s) from the callbackParameters:‚ÄãNameTypeDescriptionrecipientaddressThe address which will receive the token0 and token1 amountsamount0uint256The amount of token0 to sendamount1uint256The amount of token1 to senddatabytesAny data to be passed through to the callbackincreaseObservationCardinalityNext‚Äã  function increaseObservationCardinalityNext(    uint16 observationCardinalityNext  ) externalCopyIncrease the maximum number of price and liquidity observations that this pool will storeThis method is no-op if the pool already has an observationCardinalityNext greater than or equal to
the input observationCardinalityNext.Parameters:‚ÄãNameTypeDescriptionobservationCardinalityNextuint16The desired minimum number of observations for the pool to storeEdit this pageHelpful?PreviousIUniswapV3SwapCallbackNextIUniswapV3PoolDerivedStateFunctionsinitializemintcollectburnswapflashincreaseObservationCardinalityNextDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



