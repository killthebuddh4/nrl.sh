








Trade | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 SDKOverviewGuidesBackgroundGetting a QuoteExecuting a TradeRouting a SwapPooling LiquidityTechnical ReferenceOverviewclassesFullMathLiquidityMathMulticallNoTickDataProviderNonfungiblePositionManagerPaymentsPoolPositionPositionLibraryRouteSelfPermitSqrtPriceMathStakerSwapMathSwapQuoterSwapRouterTickTickLibraryTickListTickListDataProviderTickMathTradeenumsinterfacesSwap Widgetweb3-reactCore SDKV2 SDKV1 SDK🏠V3 SDKTechnical ReferenceclassesTradeHelpful?On this pageTrade@uniswap/v3-sdk / Exports / TradeClass: Trade<TInput, TOutput, TTradeType>Represents a trade executed against a set of routes where some percentage of the input is
split across each route.Each route has its own set of pools. Pools can not be re-used across routes.Does not account for slippage, i.e., changes in price environment that can occur between
the time the trade is submitted and when it is executed.Type parameters​NameTypeDescriptionTInputextends CurrencyThe input token, either Ether or an ERC-20TOutputextends CurrencyThe output token, either Ether or an ERC-20TTradeTypeextends TradeTypeThe trade type, either exact input or exact outputTable of contents​Constructors​constructorProperties​_executionPrice_inputAmount_outputAmount_priceImpactswapstradeTypeAccessors​executionPriceinputAmountoutputAmountpriceImpactrouteMethods​maximumAmountInminimumAmountOutworstExecutionPricebestTradeExactInbestTradeExactOutcreateUncheckedTradecreateUncheckedTradeWithMultipleRoutesexactInexactOutfromRoutefromRoutesConstructors​constructor​• Private new Trade<TInput, TOutput, TTradeType>(__namedParameters)Construct a trade by passing in the pre-computed property valuesType parameters​NameTypeTInputextends CurrencyTOutputextends CurrencyTTradeTypeextends TradeTypeParameters​NameType__namedParametersObject__namedParameters.routes{ inputAmount: CurrencyAmount<TInput> ; outputAmount: CurrencyAmount<TOutput> ; route: Route<TInput, TOutput>  }[]__namedParameters.tradeTypeTTradeTypeDefined in​entities/trade.ts:397Properties​_executionPrice​• Private _executionPrice: undefined | Price<TInput, TOutput>The cached result of the computed execution priceDefined in​entities/trade.ts:143_inputAmount​• Private _inputAmount: undefined | CurrencyAmount<TInput>The cached result of the input amount computationDefined in​entities/trade.ts:97_outputAmount​• Private _outputAmount: undefined | CurrencyAmount<TOutput>The cached result of the output amount computationDefined in​entities/trade.ts:120_priceImpact​• Private _priceImpact: undefined | PercentThe cached result of the price impact computationDefined in​entities/trade.ts:164swaps​• Readonly swaps: { inputAmount: CurrencyAmount<TInput> ; outputAmount: CurrencyAmount<TOutput> ; route: Route<TInput, TOutput>  }[]The swaps of the trade, i.e. which routes and how much is swapped in each that
make up the trade.Defined in​entities/trade.ts:82tradeType​• Readonly tradeType: TTradeTypeThe type of the trade, either exact in or exact out.Defined in​entities/trade.ts:91Accessors​executionPrice​• get executionPrice(): Price<TInput, TOutput>The price expressed in terms of output amount/input amount.Returns​Price<TInput, TOutput>Defined in​entities/trade.ts:148inputAmount​• get inputAmount(): CurrencyAmount<TInput>The input amount for the trade assuming no slippage.Returns​CurrencyAmount<TInput>Defined in​entities/trade.ts:102outputAmount​• get outputAmount(): CurrencyAmount<TOutput>The output amount for the trade assuming no slippage.Returns​CurrencyAmount<TOutput>Defined in​entities/trade.ts:125priceImpact​• get priceImpact(): PercentReturns the percent difference between the route's mid price and the price impactReturns​PercentDefined in​entities/trade.ts:169route​• get route(): Route<TInput, TOutput>DeprecatedDeprecated in favor of 'swaps' property. If the trade consists of multiple routes
this will return an error.When the trade consists of just a single route, this returns the route of the trade,
i.e. which pools the trade goes through.Returns​Route<TInput, TOutput>Defined in​entities/trade.ts:73Methods​maximumAmountIn​▸ maximumAmountIn(slippageTolerance, amountIn?): CurrencyAmount<TInput>Get the maximum amount in that can be spent via this trade for the given slippage toleranceParameters​NameTypeDescriptionslippageTolerancePercentThe tolerance of unfavorable slippage from the execution price of this tradeamountInCurrencyAmount<TInput>-Returns​CurrencyAmount<TInput>The amount inDefined in​entities/trade.ts:456minimumAmountOut​▸ minimumAmountOut(slippageTolerance, amountOut?): CurrencyAmount<TOutput>Get the minimum amount that must be received from this trade for the given slippage toleranceParameters​NameTypeDescriptionslippageTolerancePercentThe tolerance of unfavorable slippage from the execution price of this tradeamountOutCurrencyAmount<TOutput>-Returns​CurrencyAmount<TOutput>The amount outDefined in​entities/trade.ts:438worstExecutionPrice​▸ worstExecutionPrice(slippageTolerance): Price<TInput, TOutput>Return the execution price after accounting for slippage toleranceParameters​NameTypeDescriptionslippageTolerancePercentthe allowed tolerated slippageReturns​Price<TInput, TOutput>The execution priceDefined in​entities/trade.ts:471bestTradeExactIn​▸ Static bestTradeExactIn<TInput, TOutput>(pools, currencyAmountIn, currencyOut, __namedParameters?, currentPools?, nextAmountIn?, bestTrades?): Promise<Trade<TInput, TOutput, EXACT_INPUT>[]>Given a list of pools, and a fixed amount in, returns the top maxNumResults trades that go from an input token
amount to an output token, making at most maxHops hops.
Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting
the amount in among multiple routes.Type parameters​NameTypeTInputextends CurrencyTOutputextends CurrencyParameters​NameTypeDefault valueDescriptionpoolsPool[]undefinedthe pools to consider in finding the best tradecurrencyAmountInCurrencyAmount<TInput>undefinedused in recursion; the original value of the currencyAmountIn parametercurrencyOutTOutputundefinedthe desired currency out__namedParametersBestTradeOptions{}-currentPoolsPool[][]used in recursion; the current list of poolsnextAmountInCurrencyAmount<Currency>currencyAmountInexact amount of input currency to spendbestTradesTrade<TInput, TOutput, EXACT_INPUT>[][]used in recursion; the current list of best tradesReturns​Promise<Trade<TInput, TOutput, EXACT_INPUT>[]>The exact in tradeDefined in​entities/trade.ts:495bestTradeExactOut​▸ Static bestTradeExactOut<TInput, TOutput>(pools, currencyIn, currencyAmountOut, __namedParameters?, currentPools?, nextAmountOut?, bestTrades?): Promise<Trade<TInput, TOutput, EXACT_OUTPUT>[]>similar to the above method but instead targets a fixed output amount
given a list of pools, and a fixed amount out, returns the top maxNumResults trades that go from an input token
to an output token amount, making at most maxHops hops
note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting
the amount in among multiple routes.Type parameters​NameTypeTInputextends CurrencyTOutputextends CurrencyParameters​NameTypeDefault valueDescriptionpoolsPool[]undefinedthe pools to consider in finding the best tradecurrencyInTInputundefinedthe currency to spendcurrencyAmountOutCurrencyAmount<TOutput>undefinedthe desired currency amount out__namedParametersBestTradeOptions{}-currentPoolsPool[][]used in recursion; the current list of poolsnextAmountOutCurrencyAmount<Currency>currencyAmountOutthe exact amount of currency outbestTradesTrade<TInput, TOutput, EXACT_OUTPUT>[][]used in recursion; the current list of best tradesReturns​Promise<Trade<TInput, TOutput, EXACT_OUTPUT>[]>The exact out tradeDefined in​entities/trade.ts:576createUncheckedTrade​▸ Static createUncheckedTrade<TInput, TOutput, TTradeType>(constructorArguments): Trade<TInput, TOutput, TTradeType>Creates a trade without computing the result of swapping through the route. Useful when you have simulated the trade
elsewhere and do not have any tick dataType parameters​NameTypeDescriptionTInputextends CurrencyThe input token, either Ether or an ERC-20TOutputextends CurrencyThe output token, either Ether or an ERC-20TTradeTypeextends TradeTypeThe type of the trade, either exact in or exact outParameters​NameTypeDescriptionconstructorArgumentsObjectThe arguments passed to the trade constructorconstructorArguments.inputAmountCurrencyAmount<TInput>-constructorArguments.outputAmountCurrencyAmount<TOutput>-constructorArguments.routeRoute<TInput, TOutput>-constructorArguments.tradeTypeTTradeType-Returns​Trade<TInput, TOutput, TTradeType>The unchecked tradeDefined in​entities/trade.ts:346createUncheckedTradeWithMultipleRoutes​▸ Static createUncheckedTradeWithMultipleRoutes<TInput, TOutput, TTradeType>(constructorArguments): Trade<TInput, TOutput, TTradeType>Creates a trade without computing the result of swapping through the routes. Useful when you have simulated the trade
elsewhere and do not have any tick dataType parameters​NameTypeDescriptionTInputextends CurrencyThe input token, either Ether or an ERC-20TOutputextends CurrencyThe output token, either Ether or an ERC-20TTradeTypeextends TradeTypeThe type of the trade, either exact in or exact outParameters​NameTypeDescriptionconstructorArgumentsObjectThe arguments passed to the trade constructorconstructorArguments.routes{ inputAmount: CurrencyAmount<TInput> ; outputAmount: CurrencyAmount<TOutput> ; route: Route<TInput, TOutput>  }[]-constructorArguments.tradeTypeTTradeType-Returns​Trade<TInput, TOutput, TTradeType>The unchecked tradeDefined in​entities/trade.ts:377exactIn​▸ Static exactIn<TInput, TOutput>(route, amountIn): Promise<Trade<TInput, TOutput, EXACT_INPUT>>Constructs an exact in trade with the given amount in and routeType parameters​NameTypeDescriptionTInputextends CurrencyThe input token, either Ether or an ERC-20TOutputextends CurrencyThe output token, either Ether or an ERC-20Parameters​NameTypeDescriptionrouteRoute<TInput, TOutput>The route of the exact in tradeamountInCurrencyAmount<TInput>The amount being passed inReturns​Promise<Trade<TInput, TOutput, EXACT_INPUT>>The exact in tradeDefined in​entities/trade.ts:194exactOut​▸ Static exactOut<TInput, TOutput>(route, amountOut): Promise<Trade<TInput, TOutput, EXACT_OUTPUT>>Constructs an exact out trade with the given amount out and routeType parameters​NameTypeDescriptionTInputextends CurrencyThe input token, either Ether or an ERC-20TOutputextends CurrencyThe output token, either Ether or an ERC-20Parameters​NameTypeDescriptionrouteRoute<TInput, TOutput>The route of the exact out tradeamountOutCurrencyAmount<TOutput>The amount returned by the tradeReturns​Promise<Trade<TInput, TOutput, EXACT_OUTPUT>>The exact out tradeDefined in​entities/trade.ts:209fromRoute​▸ Static fromRoute<TInput, TOutput, TTradeType>(route, amount, tradeType): Promise<Trade<TInput, TOutput, TTradeType>>Constructs a trade by simulating swaps through the given routeType parameters​NameTypeDescriptionTInputextends CurrencyThe input token, either Ether or an ERC-20.TOutputextends CurrencyThe output token, either Ether or an ERC-20.TTradeTypeextends TradeTypeThe type of the trade, either exact in or exact out.Parameters​NameTypeDescriptionrouteRoute<TInput, TOutput>route to swap throughamountTTradeType extends EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>the amount specified, either input or output, depending on tradeTypetradeTypeTTradeTypewhether the trade is an exact input or exact output swapReturns​Promise<Trade<TInput, TOutput, TTradeType>>The routeDefined in​entities/trade.ts:226fromRoutes​▸ Static fromRoutes<TInput, TOutput, TTradeType>(routes, tradeType): Promise<Trade<TInput, TOutput, TTradeType>>Constructs a trade from routes by simulating swapsType parameters​NameTypeDescriptionTInputextends CurrencyThe input token, either Ether or an ERC-20.TOutputextends CurrencyThe output token, either Ether or an ERC-20.TTradeTypeextends TradeTypeThe type of the trade, either exact in or exact out.Parameters​NameTypeDescriptionroutes{ amount: TTradeType extends EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput> ; route: Route<TInput, TOutput>  }[]the routes to swap through and how much of the amount should be routed through eachtradeTypeTTradeTypewhether the trade is an exact input or exact output swapReturns​Promise<Trade<TInput, TOutput, TTradeType>>The tradeDefined in​entities/trade.ts:276Helpful?PreviousTickMathNextFeeAmountType parametersTable of contentsConstructorsPropertiesAccessorsMethodsConstructorsconstructorProperties_executionPrice_inputAmount_outputAmount_priceImpactswapstradeTypeAccessorsexecutionPriceinputAmountoutputAmountpriceImpactrouteMethodsmaximumAmountInminimumAmountOutworstExecutionPricebestTradeExactInbestTradeExactOutcreateUncheckedTradecreateUncheckedTradeWithMultipleRoutesexactInexactOutfromRoutefromRoutesDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



