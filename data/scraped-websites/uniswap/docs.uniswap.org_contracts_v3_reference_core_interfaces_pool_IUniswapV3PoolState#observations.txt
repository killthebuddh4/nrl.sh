








IUniswapV3PoolState | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 ProtocolOverviewGuidesSet Up Your Local EnvironmentImplement A SwapProviding LiquidityLiquidity MiningImplement Flash SwapsGovernance ProposalsTechnical ReferenceOverviewCoreUniswapV3FactoryUniswapV3PoolUniswapV3PoolDeployerInterfacesIERC20MinimalIUniswapV3FactoryIUniswapV3PoolIUniswapV3PoolDeployercallbackPoolIUniswapV3PoolActionsIUniswapV3PoolDerivedStateIUniswapV3PoolEventsIUniswapV3PoolImmutablesIUniswapV3PoolOwnerActionsIUniswapV3PoolStateLibrariesGovernancePeripheryDeployment AddressesError CodesUniversal RouterPermit2V2 ProtocolV1 Protocolüè†V3 ProtocolTechnical ReferenceCoreInterfacesPoolIUniswapV3PoolStateHelpful?On this pageIUniswapV3PoolStateThese methods compose the pool's state, and can change with any frequency including multiple times
per transactionFunctions‚Äãslot0‚Äã  function slot0(  ) external view returns (uint160 sqrtPriceX96, int24 tick, uint16 observationIndex, uint16 observationCardinality, uint16 observationCardinalityNext, uint8 feeProtocol, bool unlocked)CopyThe 0th storage slot in the pool stores many values, and is exposed as a single method to save gas
when accessed externally.Return Values:‚ÄãNameTypeDescriptionsqrtPriceX96uint160The current price of the pool as a sqrt(token1/token0) Q64.96 valuetickint24The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary.observationIndexuint16The index of the last oracle observation that was written,observationCardinalityuint16The current maximum number of observations stored in the pool,observationCardinalityNextuint16The next maximum number of observations, to be updated when the observation.feeProtocoluint8The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0is the lower 4 bits.Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.unlockedboolWhether the pool is currently locked to reentrancyfeeGrowthGlobal0X128‚Äã  function feeGrowthGlobal0X128(  ) external view returns (uint256)CopyThe fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the poolThis value can overflow the uint256feeGrowthGlobal1X128‚Äã  function feeGrowthGlobal1X128(  ) external view returns (uint256)CopyThe fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the poolThis value can overflow the uint256protocolFees‚Äã  function protocolFees(  ) external view returns (uint128 token0, uint128 token1)CopyThe amounts of token0 and token1 that are owed to the protocolProtocol fees will never exceed uint128 max in either tokenliquidity‚Äã  function liquidity(  ) external view returns (uint128)CopyThe currently in range liquidity available to the poolThis value has no relationship to the total liquidity across all ticksticks‚Äã  function ticks(    int24 tick  ) external view returns (uint128 liquidityGross, int128 liquidityNet, uint256 feeGrowthOutside0X128, uint256 feeGrowthOutside1X128, int56 tickCumulativeOutside, uint160 secondsPerLiquidityOutsideX128, uint32 secondsOutside, bool initialized)CopyLook up information about a specific tick in the poolParameters:‚ÄãNameTypeDescriptiontickint24The tick to look upReturn Values:‚ÄãNameTypeDescriptionliquidityGrossuint128the total amount of position liquidity that uses the pool either as tick lower or tick upper,liquidityNetint128how much liquidity changes when the pool price crosses the tick,feeGrowthOutside0X128uint256the fee growth on the other side of the tick from the current tick in token0,feeGrowthOutside1X128uint256the fee growth on the other side of the tick from the current tick in token1, feeGrowthOutsideX128 values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and are used to compute snapshots.tickCumulativeOutsideint56secondsPerLiquidityOutsideX128uint160secondsOutsideuint32initializedboola specific position.tickBitmap‚Äã  function tickBitmap(      int16 wordPosition  ) external view returns (uint256)CopyReturns 256 packed tick initialized boolean values. See TickBitmap for more informationpositions‚Äã  function positions(    bytes32 key  ) external view returns (uint128 _liquidity, uint256 feeGrowthInside0LastX128, uint256 feeGrowthInside1LastX128, uint128 tokensOwed0, uint128 tokensOwed1)CopyReturns the information about a position by the position's keyParameters:‚ÄãNameTypeDescriptionkeybytes32The position's key is a hash of a preimage composed by the owner, tickLower and tickUpperReturn Values:‚ÄãNameTypeDescription_liquiditybytes32The amount of liquidity in the position,feeGrowthInside0LastX128uint256fee growth of token0 inside the tick range as of the last mint/burn/poke,feeGrowthInside1LastX128uint256fee growth of token1 inside the tick range as of the last mint/burn/poke,tokensOwed0uint128the computed amount of token0 owed to the position as of the last mint/burn/poke,tokensOwed1uint128the computed amount of token1 owed to the position as of the last mint/burn/pokeobservations‚Äã  function observations(    uint256 index  ) external view returns (uint32 blockTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, bool initialized)CopyReturns data about a specific observation indexYou most likely want to use #observe() instead of this method to get an observation as of some amount of time
ago, rather than at a specific index in the array.Parameters:‚ÄãNameTypeDescriptionindexuint256The element of the observations array to fetchReturn Values:‚ÄãNameTypeDescriptionblockTimestampuint256The timestamp of the observation,tickCumulativeint56the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,secondsPerLiquidityCumulativeX128uint160the seconds per in range liquidity for the life of the pool as of the observation timestampinitializedboolwhether the observation has been initialized and the values are safe to useEdit this pageHelpful?PreviousIUniswapV3PoolOwnerActionsNextBitMathFunctionsslot0feeGrowthGlobal0X128feeGrowthGlobal1X128protocolFeesliquiditytickstickBitmappositionsobservationsDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



