








UniswapV3Pool | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 ProtocolOverviewGuidesSet Up Your Local EnvironmentImplement A SwapProviding LiquidityLiquidity MiningImplement Flash SwapsGovernance ProposalsTechnical ReferenceOverviewCoreUniswapV3FactoryUniswapV3PoolUniswapV3PoolDeployerInterfacesLibrariesGovernancePeripheryDeployment AddressesError CodesUniversal RouterPermit2V2 ProtocolV1 Protocolüè†V3 ProtocolTechnical ReferenceCoreUniswapV3PoolHelpful?On this pageUniswapV3PoolFunctions‚Äã_blockTimestamp‚Äã  function _blockTimestamp(  ) internal view virtual returns (uint32)CopyReturns the block timestamp truncated to 32 bits, i.e. mod 2**32. This method is overridden in tests.snapshotCumulativesInside‚Äã  function snapshotCumulativesInside(    int24 tickLower,    int24 tickUpper  ) external view override noDelegateCall returns (int56 tickCumulativeInside, uint160 secondsPerLiquidityInsideX128, uint32 secondsInside)CopyReturns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick rangeSnapshots must only be compared to other snapshots, taken over a period for which a position existed.
I.e., snapshots cannot be compared if a position is not held for the entire period between when the first
snapshot is taken and the second snapshot is taken.Parameters:‚ÄãNameTypeDescriptiontickLowerint24The lower tick of the rangetickUpperint24The upper tick of the rangeReturn Values:‚ÄãNameTypeDescriptiontickCumulativeInsideint56The snapshot of the tick accumulator for the rangesecondsPerLiquidityInsideX128uint160The snapshot of seconds per liquidity for the rangesecondsInsideuint32The snapshot of seconds per liquidity for the rangeobserve‚Äã  function observe(    uint32[] secondsAgos  ) external view override noDelegateCall returns (int56[] tickCumulatives, uint160[] secondsPerLiquidityCumulativeX128s)CopyReturns the cumulative tick and liquidity as of each timestamp secondsAgo from the current block timestampTo get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing
the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,
you must call it with secondsAgos = [3600, 0].
The time weighted average tick represents the geometric time weighted average price of the pool, in
log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.Parameters:‚ÄãNameTypeDescriptionsecondsAgosuint32[]From how long ago each cumulative tick and liquidity value should be returnedReturn Values:‚ÄãNameTypeDescriptiontickCumulativesint56[]Cumulative tick values as of each secondsAgos from the current block timestampsecondsPerLiquidityCumulativeX128suint160[]Cumulative seconds per liquidity-in-range value as of each secondsAgos from the current blocktimestampincreaseObservationCardinalityNext‚Äã  function increaseObservationCardinalityNext(    uint16 observationCardinalityNext  ) external override lock noDelegateCallCopyIncrease the maximum number of price and liquidity observations that this pool will storeThis method is no-op if the pool already has an observationCardinalityNext greater than or equal to
the input observationCardinalityNext.Parameters:‚ÄãNameTypeDescriptionobservationCardinalityNextuint16The desired minimum number of observations for the pool to storeinitialize‚Äã  function initialize(    uint160 sqrtPriceX96  ) external overrideCopySets the initial price for the poolnot locked because it initializes unlockedParameters:‚ÄãNameTypeDescriptionsqrtPriceX96uint160the initial sqrt price of the pool as a Q64.96mint‚Äã  function mint(    address recipient,    int24 tickLower,    int24 tickUpper,    uint128 amount,    bytes data  ) external override lock returns (uint256 amount0, uint256 amount1)CopyAdds liquidity for the given recipient/tickLower/tickUpper positionnoDelegateCall is applied indirectly via _modifyPositionParameters:‚ÄãNameTypeDescriptionrecipientaddressThe address for which the liquidity will be createdtickLowerint24The lower tick of the position in which to add liquiditytickUpperint24The upper tick of the position in which to add liquidityamountuint128The amount of liquidity to mintdatabytesAny data that should be passed through to the callbackReturn Values:‚ÄãNameTypeDescriptionamount0uint256The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callbackamount1uint256The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callbackcollect‚Äã  function collect(    address recipient,    int24 tickLower,    int24 tickUpper,    uint128 amount0Requested,    uint128 amount1Requested  ) external override lock returns (uint128 amount0, uint128 amount1)CopyCollects tokens owed to a positionDoes not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.
Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or
amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the
actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.Parameters:‚ÄãNameTypeDescriptionrecipientaddressThe address which should receive the fees collectedtickLowerint24The lower tick of the position for which to collect feestickUpperint24The upper tick of the position for which to collect feesamount0Requesteduint128How much token0 should be withdrawn from the fees owedamount1Requesteduint128How much token1 should be withdrawn from the fees owedReturn Values:‚ÄãNameTypeDescriptionamount0uint128The amount of fees collected in token0amount1uint128The amount of fees collected in token1burn‚Äã  function burn(    int24 tickLower,    int24 tickUpper,    uint128 amount  ) external override lock returns (uint256 amount0, uint256 amount1)CopyBurn liquidity from the sender and account tokens owed for the liquidity to the positionnoDelegateCall is applied indirectly via _modifyPositionParameters:‚ÄãNameTypeDescriptiontickLowerint24The lower tick of the position for which to burn liquiditytickUpperint24The upper tick of the position for which to burn liquidityamountuint128How much liquidity to burnReturn Values:‚ÄãNameTypeDescriptionamount0uint256The amount of token0 sent to the recipientamount1uint256The amount of token1 sent to the recipientswap‚Äã  function swap(    address recipient,    bool zeroForOne,    int256 amountSpecified,    uint160 sqrtPriceLimitX96,    bytes data  ) external override noDelegateCall returns (int256 amount0, int256 amount1)CopySwap token0 for token1, or token1 for token0The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallbackParameters:‚ÄãNameTypeDescriptionrecipientaddressThe address to receive the output of the swapzeroForOneboolThe direction of the swap, true for token0 to token1, false for token1 to token0amountSpecifiedint256The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)sqrtPriceLimitX96uint160The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swapdatabytesAny data to be passed through to the callbackReturn Values:‚ÄãNameTypeDescriptionamount0int256The delta of the balance of token0 of the pool, exact when negative, minimum when positiveamount1int256The delta of the balance of token1 of the pool, exact when negative, minimum when positiveflash‚Äã  function flash(    address recipient,    uint256 amount0,    uint256 amount1,    bytes data  ) external override lock noDelegateCallCopyReceive token0 and/or token1 and pay it back, plus a fee, in the callbackThe caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback
Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling
with 0 amount{0,1} and sending the donation amount(s) from the callbackParameters:‚ÄãNameTypeDescriptionrecipientaddressThe address which will receive the token0 and token1 amountsamount0uint256The amount of token0 to sendamount1uint256The amount of token1 to senddatabytesAny data to be passed through to the callbacksetFeeProtocol‚Äã  function setFeeProtocol(    uint8 feeProtocol0,    uint8 feeProtocol1  ) external override lock onlyFactoryOwnerCopySet the denominator of the protocol's % share of the feesParameters:‚ÄãNameTypeDescriptionfeeProtocol0uint8new protocol fee for token0 of the poolfeeProtocol1uint8new protocol fee for token1 of the poolcollectProtocol‚Äã  function collectProtocol(    address recipient,    uint128 amount0Requested,    uint128 amount1Requested  ) external override lock onlyFactoryOwner returns (uint128 amount0, uint128 amount1)CopyCollect the protocol fee accrued to the poolParameters:‚ÄãNameTypeDescriptionrecipientaddressThe address to which collected protocol fees should be sentamount0Requesteduint128The maximum amount of token0 to send, can be 0 to collect fees in only token1amount1Requesteduint128The maximum amount of token1 to send, can be 0 to collect fees in only token0Return Values:‚ÄãNameTypeDescriptionamount0uint128The protocol fee collected in token0amount1uint128The protocol fee collected in token1Edit this pageHelpful?PreviousUniswapV3FactoryNextUniswapV3PoolDeployerFunctions_blockTimestampsnapshotCumulativesInsideobserveincreaseObservationCardinalityNextinitializemintcollectburnswapflashsetFeeProtocolcollectProtocolDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



