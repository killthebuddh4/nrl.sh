








SelfPermit | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 ProtocolOverviewGuidesSet Up Your Local EnvironmentImplement A SwapProviding LiquidityLiquidity MiningImplement Flash SwapsGovernance ProposalsTechnical ReferenceOverviewCoreGovernancePeripheryBaseBlockTimestampERC721PermitLiquidityManagementMulticallPeripheryImmutableStatePeripheryPaymentsPeripheryPaymentsWithFeePoolInitializerSelfPermitInterfacesLensLibrariesStakerTestNonfungiblePositionManagerNonfungibleTokenPositionDescriptorSwapRouterV3MigratorDeployment AddressesError CodesUniversal RouterPermit2V2 ProtocolV1 Protocolüè†V3 ProtocolTechnical ReferencePeripheryBaseSelfPermitHelpful?On this pageSelfPermitFunctionality to call permit on any EIP-2612-compliant token for use in the routeThese functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function
that requires an approval in a single transaction.Functions‚ÄãselfPermit‚Äã  function selfPermit(    address token,    uint256 value,    uint256 deadline,    uint8 v,    bytes32 r,    bytes32 s  ) publicCopyPermits this contract to spend a given token from msg.senderThe owner is always msg.sender and the spender is always address(this).Parameters:‚ÄãNameTypeDescriptiontokenaddressThe address of the token spentvalueuint256The amount that can be spent of tokendeadlineuint256A timestamp, the current blocktime must be less than or equal to this timestampvuint8Must produce valid secp256k1 signature from the holder along with r and srbytes32Must produce valid secp256k1 signature from the holder along with v and ssbytes32Must produce valid secp256k1 signature from the holder along with r and vselfPermitIfNecessary‚Äã  function selfPermitIfNecessary(    address token,    uint256 value,    uint256 deadline,    uint8 v,    bytes32 r,    bytes32 s  ) externalCopyPermits this contract to spend a given token from msg.senderThe owner is always msg.sender and the spender is always address(this).
Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermitParameters:‚ÄãNameTypeDescriptiontokenaddressThe address of the token spentvalueuint256The amount that can be spent of tokendeadlineuint256A timestamp, the current blocktime must be less than or equal to this timestampvuint8Must produce valid secp256k1 signature from the holder along with r and srbytes32Must produce valid secp256k1 signature from the holder along with v and ssbytes32Must produce valid secp256k1 signature from the holder along with r and vselfPermitAllowed‚Äã  function selfPermitAllowed(    address token,    uint256 nonce,    uint256 expiry,    uint8 v,    bytes32 r,    bytes32 s  ) publicCopyPermits this contract to spend the sender's tokens for permit signatures that have the allowed parameterThe owner is always msg.sender and the spender is always address(this)Parameters:‚ÄãNameTypeDescriptiontokenaddressThe address of the token spentnonceuint256The current nonce of the ownerexpiryuint256The timestamp at which the permit is no longer validvuint8Must produce valid secp256k1 signature from the holder along with r and srbytes32Must produce valid secp256k1 signature from the holder along with v and ssbytes32Must produce valid secp256k1 signature from the holder along with r and vselfPermitAllowedIfNecessary‚Äã  function selfPermitAllowedIfNecessary(    address token,    uint256 nonce,    uint256 expiry,    uint8 v,    bytes32 r,    bytes32 s  ) externalCopyPermits this contract to spend the sender's tokens for permit signatures that have the allowed parameterThe owner is always msg.sender and the spender is always address(this)
Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.Parameters:‚ÄãNameTypeDescriptiontokenaddressThe address of the token spentnonceuint256The current nonce of the ownerexpiryuint256The timestamp at which the permit is no longer validvuint8Must produce valid secp256k1 signature from the holder along with r and srbytes32Must produce valid secp256k1 signature from the holder along with v and ssbytes32Must produce valid secp256k1 signature from the holder along with r and vEdit this pageHelpful?PreviousPoolInitializerNextIERC20MetadataFunctionsselfPermitselfPermitIfNecessaryselfPermitAllowedselfPermitAllowedIfNecessaryDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



