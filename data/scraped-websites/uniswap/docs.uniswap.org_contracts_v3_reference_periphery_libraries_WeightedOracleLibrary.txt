








WeightedOracleLibrary | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 ProtocolOverviewGuidesSet Up Your Local EnvironmentImplement A SwapProviding LiquidityLiquidity MiningImplement Flash SwapsGovernance ProposalsTechnical ReferenceOverviewCoreGovernancePeripheryBaseInterfacesLensLibrariesBase64BytesLibCallbackValidationChainIdHexStringsLiquidityAmountsNFTDescriptorNFTSVGOracleLibraryPathPoolAddressPoolTicksCounterPositionKeyTokenRatioSortOrderTransferHelperWeightedOracleLibraryStakerTestNonfungiblePositionManagerNonfungibleTokenPositionDescriptorSwapRouterV3MigratorDeployment AddressesError CodesUniversal RouterPermit2V2 ProtocolV1 Protocolüè†V3 ProtocolTechnical ReferencePeripheryLibrariesWeightedOracleLibraryHelpful?On this pageWeightedOracleLibraryProvides functions to integrate with different tier oracles of the same V3 pairFunctions‚Äãconsult‚Äã  function consult(    address pool,    uint32 period  ) internal view returns (struct WeightedOracleLibrary.PeriodObservation observation)CopyFetches a time-weighted observation for a given Uniswap V3 poolParameters:‚ÄãNameTypeDescriptionpooladdressAddress of the pool that we want to observeperioduint32Number of seconds in the past to start calculating the time-weighted observationReturn Values:‚ÄãNameTypeDescriptionobservationaddressAn observation that has been time-weighted from (block.timestamp - period) to block.timestampgetArithmeticMeanTickWeightedByLiquidity‚Äã  function getArithmeticMeanTickWeightedByLiquidity(    struct WeightedOracleLibrary.PeriodObservation[] observations  ) internal pure returns (int24 arithmeticMeanWeightedTick)CopyGiven some time-weighted observations, calculates the arithmetic mean tick, weighted by liquidityIn most scenarios, each entry of observations should share the same period and underlying pool tokens.
If period differs across observations, the result becomes difficult to interpret and is likely biased/manipulable.
If the underlying pool tokens differ across observations, extreme care must be taken to ensure that both prices and liquidity values are comparable.
Even if prices are commensurate (e.g. two different USD-stable assets against ETH), liquidity values may not be, as decimals can differ between tokens.Parameters:‚ÄãNameTypeDescriptionobservationsstruct WeightedOracleLibrary.PeriodObservation[]A list of time-weighted observationsReturn Values:‚ÄãNameTypeDescriptionarithmeticMeanWeightedTickstruct WeightedOracleLibrary.PeriodObservation[]The arithmetic mean tick, weighted by the observations' time-weighted harmonic average liquidityEdit this pageHelpful?PreviousTransferHelperNextUniswap V3 Staker DesignFunctionsconsultgetArithmeticMeanTickWeightedByLiquidityDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



