








Oracle | Uniswap





Skip to main contentUniswap DocsConceptsContractsSDKsAPIsGive FeedbackWhitepaperGitHubGrantsSearchV3 ProtocolOverviewGuidesSet Up Your Local EnvironmentImplement A SwapProviding LiquidityLiquidity MiningImplement Flash SwapsGovernance ProposalsTechnical ReferenceOverviewCoreUniswapV3FactoryUniswapV3PoolUniswapV3PoolDeployerInterfacesLibrariesBitMathFixedPoint128FixedPoint96FullMathLiquidityMathLowGasSafeMathOraclePositionSafeCastSecondsOutsideSqrtPriceMathSwapMathTickTickBitmapTickMathTransferHelperUnsafeMathGovernancePeripheryDeployment AddressesError CodesUniversal RouterPermit2V2 ProtocolV1 Protocol🏠V3 ProtocolTechnical ReferenceCoreLibrariesOracleHelpful?On this pageOracleProvides price and liquidity data useful for a wide variety of system designsInstances of stored oracle data, "observations", are collected in the oracle array
Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the
maximum length of the oracle array. New slots will be added when the array is fully populated.
Observations are overwritten when the full length of the oracle array is populated.
The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()Functions​initialize​  function initialize(    struct Oracle.Observation[65535] self,    uint32 time  ) internal returns (uint16 cardinality, uint16 cardinalityNext)CopyInitialize the oracle array by writing the first slot. Called once for the lifecycle of the observations arrayParameters:​NameTypeDescriptionselfstruct Oracle.Observation[65535]The stored oracle arraytimeuint32The time of the oracle initialization, via block.timestamp truncated to uint32Return Values:​NameTypeDescriptioncardinalityuint16The number of populated elements in the oracle arraycardinalityNextuint16The new length of the oracle array, independent of populationwrite​  function write(    struct Oracle.Observation[65535] self,    uint16 index,    uint32 blockTimestamp,    int24 tick,    uint128 liquidity,    uint16 cardinality,    uint16 cardinalityNext  ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated)CopyWrites an oracle observation to the arrayWritable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.
If the index is at the end of the allowable array length (according to cardinality), and the next cardinality
is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.Parameters:​NameTypeDescriptionselfstruct Oracle.Observation[65535]The stored oracle arrayindexuint16The location of the most recently updated observationblockTimestampuint32The timestamp of the new observationtickint24The active tick at the time of the new observationliquidityuint128The total in-range liquidity at the time of the new observationcardinalityuint16The number of populated elements in the oracle arraycardinalityNextuint16The new length of the oracle array, independent of populationReturn Values:​NameTypeDescriptionindexUpdateduint16The new index of the most recently written element in the oracle arraycardinalityUpdateduint16The new cardinality of the oracle arraygrow​  function grow(    struct Oracle.Observation[65535] self,    uint16 current,    uint16 next  ) internal returns (uint16)CopyPrepares the oracle array to store up to next observationsParameters:​NameTypeDescriptionselfstruct Oracle.Observation[65535]The stored oracle arraycurrentuint16The current next cardinality of the oracle arraynextuint16The proposed next cardinality which will be populated in the oracle arrayReturn Values:​NameTypeDescriptionnextuint16The next cardinality which will be populated in the oracle arrayobserve​  function observe(    struct Oracle.Observation[65535] self,    uint32 time,    uint32[] secondsAgos,    int24 tick,    uint16 index,    uint128 liquidity,    uint16 cardinality  ) internal view returns (int56[] tickCumulatives, uint160[] liquidityCumulatives)CopyReturns the accumulator values as of each time seconds ago from the given time in the array of secondsAgosReverts if secondsAgos > oldest observationParameters:​NameTypeDescriptionselfstruct Oracle.Observation[65535]The stored oracle arraytimeuint32The current block.timestampsecondsAgosuint32[]Each amount of time to look back, in seconds, at which point to return an observationtickint24The current tickindexuint16The location of a given observation within the oracle arrayliquidityuint128The current in-range pool liquiditycardinalityuint16The number of populated elements in the oracle arrayReturn Values:​NameTypeDescriptiontickCumulativesint56[]The tick * time elapsed since the pool was first initialized, as of each secondsAgoliquidityCumulativesuint160[]The liquidity * time elapsed since the pool was first initialized, as of each secondsAgoEdit this pageHelpful?PreviousLowGasSafeMathNextPositionFunctionsinitializewritegrowobserveDevelopersFeedbackBug Bounty#dev-chatWhitepaperGithubuniswap-v3-coreuniswap-v3-sdkuniswap-v3-peripheryDeployment addressesEcosystemHomeAppAnalyticsToken ListsBrand AssetsCommunityGovernanceDiscordTwitterBlog



