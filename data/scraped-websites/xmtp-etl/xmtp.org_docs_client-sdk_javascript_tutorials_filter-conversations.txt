
















Filter conversations using conversation IDs and metadata    




!function(){function t(t){document.documentElement.setAttribute("data-theme",t)}var e=function(){var t=null;try{t=localStorage.getItem("theme")}catch(t){}return t}();t(null!==e?e:"light")}()Skip to main contentDocumentation
                 JavaScript XMTP client SDK
                 Tutorials and reference for building apps in JavaScript
                 Kotlin XMTP client SDK
                 Tutorial for building apps in Kotlin
                 Swift XMTP client SDK
                 Tutorial for building apps in Swift
                 Dart XMTP client SDK
                 Tutorial and reference for building apps in Dart
                 Development concepts
                 Learn about XMTP architecture, security, FAQ, and moreSDKs and toolsCommunity
                Join in and contribute
                Join in and contribute to the XMTP community
                Grants
                Apply for a grant for a project that fosters ecosystem growth
                Built with XMTP
                Explore a showcase of apps built with XMTP
                Code of conduct
                 Foster a safe and positive XMTP community experienceVision
                Litepaper
                Read the public draft of the XMTP Litepaper
                Roadmap
                 Learn about what's in store for XMTP in the months aheadBlog⚡️ Start building ⚡️Search⌘KConcepts for xmtp-jsIntro to the XMTP JavaScript SDKTutorials for xmtp-jsStart messaging with XMTPQuickstartBuild key XMTP chat features in a Lens appBuild an XMTP "GM" appFilter conversationsLabel conversationsUse content typesUse a persistent conversation cacheReference for xmtp-jsClassesClientCompositeCodecContentTypeIdConversationsDecodedMessagePrivateKeyPublicKeyPublicKeyBundleSignedPublicKeyBundleStreamTextCodecInterfacesContentCodecEncodedContentOther types and variablesTutorials for xmtp-jsFilter conversationsOn this pageFilter conversations using conversation IDs and metadataWith XMTP, a conversation is a set of messages sent between two blockchain account addresses (addresses). Two addresses can have multiple ongoing conversations.Optionally, you can assign an ID and metadata to a conversation to use as conversation filters in your app.For example, you can use conversation IDs and metadata to filter conversations by:A message type
Filter to display only conversations that are notifications or alerts, for example.A subject line
Filter to display only conversations with a specific subject line, as in emailAn NFT
Filter to display only conversations about an NFT, such as price negotiations or shipping instructionsAn app
Filter to display only conversations created by a specific appHere are examples of conversation filters implemented in two apps built with XMTP:Following and Other in the Buttrfly app:  Following and Requested in the Lenster app:  Lens, Wallet to wallet, and requests in the Orb app:  Conversation IDs are different from content types. Using a custom content type does not require that you use conversation IDs.Use this tutorial to learn how to use conversation IDs and metadata to filter conversations in your app.Conversation IDs and metadata are not required. Using conversation IDs affects the user experience in certain apps built with XMTP, so implement them only if you have a strategic need to filter conversations.For example, when you set an ID for a conversation between two users, if they are messaging using multiple apps built with XMTP, they may see multiple conversations between their addresses. To learn how to address this scenario, see Label conversations.Set a conversation ID​Set the conversationId when creating a conversation. conversationId values are private and encrypted.Use a unique conversation IDAs a best practice, start your conversationId with a domain that is unique to your app to help avoid collisions between your app and other apps on the XMTP network.This example sets mydomain.xyz/notif as the conversationId when creating a conversation with recipient address 0x3F11b27F323b62B159D2642964fa27C46C841897:// Start a scoped conversation with ID mydomain.xyz/notifconst conversation1 = await xmtp.conversations.newConversation(  '0x3F11b27F323b62B159D2642964fa27C46C841897',  {    conversationId: 'mydomain.xyz/notif',  })This conversationId indicates that these conversations are notification messages created by mydomain.xyz, for example. The mydomain.xyz/notif conversation ID can then be used to display only notification messages created by the app.Set conversation metadata​In addition to setting a conversation ID when creating a conversation, you can set metadata to use as an additional filter or to assign useful context to the conversation. Conversation metadata is private and encrypted.This example sets mydomain.xyz/message as the conversationId, indicating that these conversations are messages. In addition, the example sets a conversation metadata nickname value to example.You can then use this conversation ID and metadata to display only messages created by your app and surface a conversation label based on the nickname value, for example.// Start a scoped conversation with ID mydomain.xyz/message and add some metadataconst conversation2 = await xmtp.conversations.newConversation(  '0x3F11b27F323b62B159D2642964fa27C46C841897',  {    conversationId: 'mydomain.xyz/message',    metadata: {      nickname: 'example',    },  })Filter conversations by ID and metadata​Now that you've set a conversation ID and metadata, you can use them to filter conversations in your app.Get all of the conversations, as shown in lines 1-2.Filter by the domain value in your conversationId, mydomain.xyz/ for example, to return only conversations created by your app, as shown in lines 3-8.You can further filter by the rest of the conversationId and metadata. For example, filter by notif to display only notification messages, as shown in lines 10-14.You can also separately filter by message and use the metadata nickname value as needed in your app, as shown in lines 15-18.// Get all the conversationsconst conversations = await xmtp.conversations.list()// Filter for conversations from your applicationconst myAppConversations = conversations.filter(  (convo) =>    convo.context?.conversationId &&    convo.context.conversationId.startsWith('mydomain.xyz/'))for (const conversation of myAppConversations) {  const conversationId = conversation.context?.conversationId  if (conversationId === 'mydomain.xyz/notif') {    await conversation.send('notif')  }  if (conversationId === 'mydomain.xyz/message') {    await conversation.send('message')    console.log(conversation.context?.metadata.nickname)  }}Learn more​To learn about how a Lens app uses and filters by a conversation ID, see Build key XMTP chat features in a Lens app.To learn more about conversation topics, see XMTP V2 topics and message presentation flow.Edit this pageLast updated on Mar 15, 2023 by Jennifer HasegawaPreviousBuild an XMTP "GM" appNextLabel conversationsOn this pageSet a conversation IDSet conversation metadataFilter conversations by ID and metadataLearn moreQuestions? Give us feedbackClient SDKsJavaScriptKotlinSwiftDartDevelopment conceptsIntro to XMTPStart buildingArchitectural overviewFAQInteroperable inboxContent typesUX best practicesKey generation and usageInvitation and message encryptionWallet app and chain supportAccount signaturesContribute to XMTPReleasesXMTP Improvement ProposalsSDKs and toolsSDKsExample appsXMTP status pageCommunityBuilt with XMTPDiscussionsDiscordTwitterContribute to XMTPXMTP Improvement ProposalsXMTP code of conductCareers at XMTP LabsVisionLitepaperRoadmapCC BY 4.0Privacy policyTerm of service



