








Algorithms in use | XMTP: The open protocol and network for secure web3 messaging





Skip to main contentDocumentation
JavaScript XMTP client SDK
Tutorials and reference for building apps in JavaScript
Kotlin XMTP client SDK
Tutorial for building apps in Kotlin
Swift XMTP client SDK
Tutorial for building apps in Swift
Dart XMTP client SDK
Tutorial and reference for building apps in Dart
Development concepts
Learn about XMTP architecture, security, FAQ, and moreSDKs and toolsCommunity
Join in and contribute
Join in and contribute to the XMTP community
Grants
Apply for a grant for a project that fosters ecosystem growth
Built with XMTP
Explore a showcase of apps built with XMTP
Code of conduct
Foster a safe and positive XMTP community experienceVision
Litepaper
Read the public draft of the XMTP Litepaper
Roadmap
Learn about what's in store for XMTP in the months aheadBlog⚡️ Start building ⚡️SearchIntroductionStart buildingArchitectural overviewFAQInteroperable inboxContent typesUX best practicesKey generation and usageInvitation and message encryptionAlgorithms in useWallet app and chain supportAccount signaturesContributeReleasesXMTP Improvement ProposalsAlgorithms in useAlgorithms in useXMTP supports the replacement and expansion of supported algorithms in a backward-compatible manner.Supported algorithms are selected based on fairly pragmatic criteria. For example, the algorithm must be:Tried and true and in widespread useWell-supported in desirable XMTP client app languages, such as JavaScriptAvailable in standard browser APIs, rather than via third-party dependenciesXMTP also aims to reuse existing algorithms, looking to well-known and standard algorithms with trustworthy implementations.As such, XMTP's cryptographic primitives are built around the standard Web Crypto API and the @noble libraries, using components of Signal's X3DH protocol for secure offline communication.Specifically, XMTP's participant authentication and message encryption algorithm choices include:EC Public/Private Keys (secp256k1)ECDSA signatures and signing of public keys (ECDSA and EIP-191)Shared secret derivation (ECDH/X3DH)Authenticated symmetric encryption (AEAD: AES-256-GCM)Symmetric key derivation (HKDF-SHA-256)X3DH-style key bundles (X3DH Key Agreement Protocol)Questions? Give us feedbackPreviousInvitation and message encryptionNextWallet app and chain supportClient SDKsJavaScriptKotlinSwiftDartDevelopment conceptsIntro to XMTPStart buildingArchitectural overviewFAQInteroperable inboxContent typesUX best practicesKey generation and usageInvitation and message encryptionWallet app and chain supportAccount signaturesContribute to XMTPReleasesXMTP Improvement ProposalsSDKs and toolsSDKsExample appsXMTP status pageCommunityBuilt with XMTPDiscussionsDiscordTwitterContribute to XMTPXMTP Improvement ProposalsXMTP code of conductCareers at XMTP LabsVisionLitepaperRoadmapCC BY 4.0Privacy policyTerm of service



