








Conversations | XMTP: The open protocol and network for secure web3 messaging





Skip to main contentDocumentation
JavaScript XMTP client SDK
Tutorials and reference for building apps in JavaScript
Kotlin XMTP client SDK
Tutorial for building apps in Kotlin
Swift XMTP client SDK
Tutorial for building apps in Swift
Dart XMTP client SDK
Tutorial and reference for building apps in Dart
Development concepts
Learn about XMTP architecture, security, FAQ, and moreSDKs and toolsCommunity
Join in and contribute
Join in and contribute to the XMTP community
Grants
Apply for a grant for a project that fosters ecosystem growth
Built with XMTP
Explore a showcase of apps built with XMTP
Code of conduct
Foster a safe and positive XMTP community experienceVision
Litepaper
Read the public draft of the XMTP Litepaper
Roadmap
Learn about what's in store for XMTP in the months aheadBlogSearchConcepts for xmtp-jsIntro to the XMTP JavaScript SDKTutorials for xmtp-jsStart messaging with XMTPQuickstartBuild key XMTP chat features in a Lens appBuild an XMTP "GM" appFilter conversationsLabel conversationsUse content typesUse a persistent conversation cacheReference for xmtp-jsClassesClientCompositeCodecContentTypeIdConversationsDecodedMessagePrivateKeyPublicKeyPublicKeyBundleSignedPublicKeyBundleStreamTextCodecInterfacesContentCodecEncodedContentOther types and variablesReference for xmtp-jsClassesConversationsOn this pageConversationsClass: ConversationsConversations allows you to view ongoing 1:1 messaging sessions with another walletConstructors​constructor​new Conversations(client)Parameters​NameTypeclientClientDefined in​conversations/Conversations.ts:21Properties​client​ Private client: ClientDefined in​conversations/Conversations.ts:20Methods​getIntroductionPeers​Private getIntroductionPeers(): Promise<Map<string, Date>>Returns​Promise<Map<string, Date>>Defined in​conversations/Conversations.ts:233getPeerAddress​Private getPeerAddress(message): stringParameters​NameTypemessageMessageV1Returns​stringDefined in​conversations/Conversations.ts:365list​list(): Promise<Conversation[]>List all conversations with the current wallet found in the network, deduped by peer addressReturns​Promise<Conversation[]>Defined in​conversations/Conversations.ts:28newConversation​newConversation(peerAddress, context?): Promise<Conversation>Creates a new conversation for the given address. Will throw an error if the peer is not found in the XMTP networkParameters​NameTypepeerAddressstringcontext?InvitationContextReturns​Promise<Conversation>Defined in​conversations/Conversations.ts:270sendInvitation​Private sendInvitation(recipient, invitation, created): Promise<SealedInvitation>Parameters​NameTyperecipientSignedPublicKeyBundleinvitationInvitationV1createdDateReturns​Promise<SealedInvitation>Defined in​conversations/Conversations.ts:335stream​stream(): Promise<Stream<Conversation>>Returns a stream of any newly created conversations.
Will dedupe to not return the same conversation twice in the same stream.
Does not dedupe any other previously seen conversationsReturns​Promise<Stream<Conversation>>Defined in​conversations/Conversations.ts:59streamAllMessages​streamAllMessages(): Promise<AsyncGenerator<DecodedMessage, any, unknown>>Streams messages from all conversations.When a new conversation is initiated with the client's address, this function will automatically register it and add it to the list of conversations to watch.
Callers should be aware the first messages in a newly created conversation are picked up on a best effort basis and there are other potential race conditions which may cause some newly created conversations to be missed.Returns​Promise<AsyncGenerator<DecodedMessage, any, unknown>>Defined in​conversations/Conversations.ts:110Edit this pageLast updated on Mar 10, 2023 by Jennifer HasegawaPreviousContentTypeIdNextDecodedMessageOn this pageConstructorsconstructorPropertiesclientMethodsgetIntroductionPeersgetPeerAddresslistnewConversationsendInvitationstreamstreamAllMessagesQuestions? Give us feedbackClient SDKsJavaScriptKotlinSwiftDartDevelopment conceptsIntro to XMTPArchitectural overviewFAQInteroperable inboxContent typesUX best practicesKey generation and usageInvitation and message encryptionWallet app and chain supportAccount signaturesContribute to XMTPReleasesXMTP Improvement ProposalsSDKs and toolsSDKsExample appsXMTP status pageCommunityBuilt with XMTPDiscussionsDiscordTwitterContribute to XMTPXMTP Improvement ProposalsXMTP code of conductCareers at XMTP LabsVisionLitepaperRoadmapCC BY 4.0Privacy policyTerm of service



